This is just a bunch of ideas - completely unordered and there is no
reason to assume I actually do the things mentioned below. Anyway, if
you want to volunteer, you might find some ideas below. ;-)

- Transparently map RFC 1213 ipRouteTable in the CIDR routing table
  in the proc layer.

- Extend the show ip forwarding command with an optional argument
  which contains a destination address and compute the set of possible
  routes.

- Extend the show bridge forwarding command with an optional argument
  which contains a MAC address and compute the port this MAC is
  forwarded to. (Does the current sorting of the forwarding table by
  port really make so much sense? We do not do this for the IP layer
  forwarding table.)

- Does it make sense to introduce query commands that do specific
  computations on retrieved data that would normally be done by a
  device, such as:

  query snmp vacm <name> <mod> <lvl> <ctxt> [<oid>]
  query bridge forwarding <mac>
  query ip forwarding <ip>[/<prefix>]

  The last two ones could also be implemented by adding an optional
  argument to the "show ip forwarding" and "show bridge forwarding"
  commands.

- Improve the SNMP version autoprobe feature to get rid of the timeouts

- Plug the table retrieval memory leaks

- Implement a real curses top command (with sorting)

- Change the monitor command to a simple loop?

- Additional command line options:
  -t --transport (udp/tcp)
  -u --user
  -c --context

- Create some sort of a test suite (which is not that easy for highly
  interactive programs).

- Display processor load in the scli monitor system process summary line.

- Generally check strings for printable characters and trim white spaces.

- Should TCP connections be sorted by connection state?

- Should process lists be sorted by CPU usage?

- What about sorting interface stats by number? Might be confusing if
  things jump up and down.

- Need to complete the ospf mode.

- Need to add documentation and error reports on command options.

==== GXSNMP specific things ====

+ 1. change the oid type from gulong to guint32

  2. allow timeouts in ms rather than seconds

+ 3. generate unused random request ids

  4. do not use strcpy et al when dealing with octet strings - in fact,
     the g_pdu_add_oid() function needs to have another parameter to pass
     the value length down

  5. asn1_int_decode -> g_asn1_int_decode

+ 6. make byteReverse static in g_md5.c

+ 7. get rid of the signed char in the syntax union

  8. get rid of any printf's in the library code

+ 9. get rid of the idea of IPv6 addresses as a base type

+10. get rid of the timeticks printer (even if this means duplication)

 11. there was a missing #include somewhere

 12. add a sync table retrieval interface

 13. <removed>

+14. add support for 64 bit counters

 15. port numbers passed to the library are ignored

+16. fix the type definitions to follow glib naming style

 17. turn #define enumerations into real enumerations

 18. there are several memory leaks in the code

 19. implement a coexistance layer to hide snmpv1/snmpv2 pdu differences

+20. fix the usage of "gint32 i32[0]" which violates ANSI C
