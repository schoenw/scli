\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename stools.info
@settitle A collection of SNMP command line management tools
@finalout
@setchapternewpage odd
@c %**end of header

@set VERSION 0.1.7

@ifinfo
This file documents the @code{stools} collection of SNMP command line
management tools.

Copyright (C) 2001 Juergen Schoenwaelder

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end ifinfo

@titlepage
@title stools
@subtitle A collection of SNMP command line management tools
@subtitle for stools Version @value{VERSION}
@author by Juergen Schoenwaelder

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001 Juergen Schoenwaelder

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end titlepage

@c All the nodes can be updated using the EMACS command
@c texinfo-every-node-update, which is normally bound to C-c C-u C-e.
@node Top, Instructions, (dir), (dir)

@ifinfo
This file documents the @code{stools} collection of SNMP command line
management tools.
@end ifinfo

@c All the menus can be updated with the EMACS command
@c texinfo-all-menus-update, which is normally bound to C-c C-u C-a.
@menu
* Instructions::                How to read this manual. 
* Copying::                     How you can copy and share @code{stools}.
* Overview::                    Preliminary information.
* History::                     History.
* Project Design::              Project Design.
* Software Aspects::            Software Aspects.
* Writing New Modes::           Writing New Modes.
* Problems::                    Reporting bugs.
* Concept Index::               Index of concepts.
@end menu

@node Instructions, Copying, Top, Top
@chapter How to Read This Manual

@cindex reading
@cindex manual, how to read
@cindex how to read
This document contains two parts. The first part explains the design and
the history of the @code{stools} package. The second part provides step
by step instructions how the @code{stools} package can be extended.

This memo does not provide a detailed description of the various tools
and their command line options. The reader is referred to the manual
pages for these details.

@node Copying, Overview, Instructions, Top
@include gpl.texinfo

@node Overview, History, Copying, Top
@chapter Overview
@cindex greetings
@cindex overview

The GNU @code{stools} package contains a collection of SNMP command line
management tools. Most SNMP management tools try to be very generic and
they often fail to be useful. A good example are generic MIB browsers
that display raw MIB data structures. These browsers tend to be of
little use for actual management because MIB data structures are
designed to be read by programs rather than humans.

The tools contained in the @code{stools} package are designed to be
specific rather than generic. In other words, the tools are designed to
understand the data they are manipulated. It is not uncommon that the
tools use information from different MIB modules in order to display
data in a format which is easy to understand for human beings.

GNU @code{stools} was written by Juergen Schoenwaelder.

@node History, Project Design, Overview, Top
@chapter History
@cindex history

The @code{stools} package was written because of the author's continued
frustration about how complex it is to configure and troubleshoot SNMP
manageable devices. In fact, the author tried several approaches to
tackle this problem before. In the 1990's, I did some work on scripting
language API extensions do simplify the interaction with networked
devices. The result of these efforts was the Tnm extension for Tcl [],
which is been widely deployed these days, especially for testing and
device emulation purposes.

In the 1990's, I also followed the network management platform idea
and wrote tkined, which is some kind of a light-weight management
platform. It provides generic services and is highly extensible. All
you need to do is to write a Tcl script in order to implement new
management functionailies. Although this sounds nice in principle, the
reality is that most people do not want to write management scripts.
Although the package has been openly available for many years, only
few script contributions went back into the source distribution.

I also wrote several generic MIB browsers. A very old one is still
running on our Web server and being used regularly by people to
browser MIBs and agents. But even with this Web-based solution, I an
personally not very happy. I just do not want to fire up a complex Web
browser just to look at (potentially big) HTML page which display data
at the abstraction level of an API between elements in a distributed
system. Nobody would like to look at raw data in a CORBA based
environment - except people who need to debug such systems.

In the last years, I was involved in the specification and
implementation of MIBs for the delegation of management
functions. Very early in the project, it became clear that we need to
have a good front-end. Again, we tried several approaches. The first
one was a Java based applet running in a Web browser. This was usable
for demos, but nothing for everyday work. The second front-end was a
Java stand-alone program. It provides a better user interface. But it
eats up so many resources (and refuses to run on my 256 color display)
so that people again used the old Web-based solution I wrote years
ago.

So I started to think what is wrong with all this and I came to the
conclusion that the approach to build generic tools is fundamentally
flawed. Instead, it is necessary to build very specific tools and
representations. But how can this be done efficiently if the available
resources are limited?

@node Project Design, Software Aspects, History, Top
@chapter Project Design
@cindex invoking
@cindex version
@cindex options
@cindex usage
@cindex help
@cindex getting help

It is only possible to build specific tools rather than generic tools
by investing lots of time. Someone who understand specific MIBs must
design highly usable management interfaces on top of them. The only
reasonable way to tackle this is to start an open source project and
to get lots of programmers involved. This leads to the requirement
that the source code must be modular so that specific extension for
e.g. modem management can be easily integrated.

However, my experience with past projects shows that the number of
SNMP programmers is really not that huge. So this leads to another
important requirement: It must be possible to perform SNMP operations
without any intimidate knowledge of the SNMP protocol. To technical
mechanism to address this requirement is to use a MIB compiler which
generates stub code for management applications from MIB modules. The
stub code should export simple C structures that every programmer can
easily understand and handle.

@node Software Aspects, Writing New Modes, Project Design, Top
@chapter Software Aspects

I started to work on the framework of two tools. The first program
called stop displays monitoring data on a character terminal which is
regularly updated, similar to the well known Unix top. The second
program called scli provides an SNMP based command line interface.
stop is based on curses/ncurses while scli uses the GNU readline
library to provide command line editing and history capabilities.


- why gxsnmp and not netsnmp?

- why glib?

- why not tcl?


MIB Stub Generator


@node Writing New Modes, Problems, Software Aspects, Top
@chapter Writing New Modes

This chapter explains how you can add functionality to @code{stools}
programs.

@section Adding MIB Stubs

I might be necessary to add stubs for additional MIB modules. This
process is very straightforward. 

@enumerate
@item
Edit @code{stubs/Makefile.am}

@item
Run @code{make stubs} in the @code{stubs} directory. Note that you need
a version of @code{smidump} which is compatible with the @code{stools}
release you are using.

@item
Edit @code{stubs/stools.h} by adding the new header file(s) to the
includes at the end of the file.
@end enumerate

@section Writing @code{stop} Modes

@section Writing @code{scli} Modes


@node Problems, Concept Index, Writing New Modes, Top
@chapter Problems

If you find a bug in @code{stools}, please send electronic mail to
@w{@samp{stools@@ibr.cs.tu-bs.de}}.  Include the version number, which
you can find by running @w{@samp{stop --version}} or @w{@samp{scli
--version}}.  Also include in your message the output that the program
produced and the output you expected.@refill

If you have other questions, comments or suggestions about
@code{stools}, contact the author via electronic mail to
@w{@samp{schoenw@@ibr.cs.tu-bs.de}}.  The author will try to help you
out, although he may not have time to fix your problems.

@node Concept Index,  , Problems, Top
@unnumbered Concept Index

@cindex tail recursion
@printindex cp

@shortcontents
@contents
@bye
