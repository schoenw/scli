/*							-- DO NOT EDIT --
 * This file has been generated by smidump
 * version 0.2.14 for the stools package.
 *
 * Derived from SNMP-USER-BASED-SM-MIB:
 *   The management information definitions for the
 *   SNMP User-based Security Model.
 *   
 *
 * Revision 1999-01-20 00:00:
 *   Clarifications, published as RFC2574
 *
 * Revision 1997-11-20 00:00:
 *   Initial version, published as RFC2274
 *
 * $Id$
 */

#ifndef _SNMP_USER_BASED_SM_MIB_H_
#define _SNMP_USER_BASED_SM_MIB_H_

#include "stools.h"

/*
 * Tables to map enumerations to strings and vice versa.
 */

#define SNMP_USER_BASED_SM_MIB_USMUSERSTORAGETYPE_OTHER	1
#define SNMP_USER_BASED_SM_MIB_USMUSERSTORAGETYPE_VOLATILE	2
#define SNMP_USER_BASED_SM_MIB_USMUSERSTORAGETYPE_NONVOLATILE	3
#define SNMP_USER_BASED_SM_MIB_USMUSERSTORAGETYPE_PERMANENT	4
#define SNMP_USER_BASED_SM_MIB_USMUSERSTORAGETYPE_READONLY	5

extern stls_enum_t const snmp_user_based_sm_mib_enums_usmUserStorageType[];

#define SNMP_USER_BASED_SM_MIB_USMUSERSTATUS_ACTIVE	1
#define SNMP_USER_BASED_SM_MIB_USMUSERSTATUS_NOTINSERVICE	2
#define SNMP_USER_BASED_SM_MIB_USMUSERSTATUS_NOTREADY	3
#define SNMP_USER_BASED_SM_MIB_USMUSERSTATUS_CREATEANDGO	4
#define SNMP_USER_BASED_SM_MIB_USMUSERSTATUS_CREATEANDWAIT	5
#define SNMP_USER_BASED_SM_MIB_USMUSERSTATUS_DESTROY	6

extern stls_enum_t const snmp_user_based_sm_mib_enums_usmUserStatus[];


/*
 * Tables to map identities to strings and vice versa.
 */

#define SNMP_USER_BASED_SM_MIB_USMNOAUTHPROTOCOL	1,3,6,1,6,3,10,1,1,1
#define SNMP_USER_BASED_SM_MIB_USMHMACMD5AUTHPROTOCOL	1,3,6,1,6,3,10,1,1,2
#define SNMP_USER_BASED_SM_MIB_USMHMACSHAAUTHPROTOCOL	1,3,6,1,6,3,10,1,1,3
#define SNMP_USER_BASED_SM_MIB_USMNOPRIVPROTOCOL	1,3,6,1,6,3,10,1,2,1
#define SNMP_USER_BASED_SM_MIB_USMDESPRIVPROTOCOL	1,3,6,1,6,3,10,1,2,2

/*
 * C type definitions for SNMP-USER-BASED-SM-MIB::usmStats.
 */

typedef struct usmStats {
    guint32  *usmStatsUnsupportedSecLevels;
    guint32  *usmStatsNotInTimeWindows;
    guint32  *usmStatsUnknownUserNames;
    guint32  *usmStatsUnknownEngineIDs;
    guint32  *usmStatsWrongDigests;
    guint32  *usmStatsDecryptionErrors;
} usmStats_t;

extern usmStats_t *
snmp_user_based_sm_mib_new_usmStats();

extern int
snmp_user_based_sm_mib_get_usmStats(host_snmp *s, usmStats_t **usmStats);

extern void
snmp_user_based_sm_mib_free_usmStats(usmStats_t *usmStats);

/*
 * C type definitions for SNMP-USER-BASED-SM-MIB::usmUser.
 */

typedef struct usmUser {
    gint32   *usmUserSpinLock;
} usmUser_t;

extern usmUser_t *
snmp_user_based_sm_mib_new_usmUser();

extern int
snmp_user_based_sm_mib_get_usmUser(host_snmp *s, usmUser_t **usmUser);

extern int
snmp_user_based_sm_mib_set_usmUser(host_snmp *s, usmUser_t *usmUser);

extern void
snmp_user_based_sm_mib_free_usmUser(usmUser_t *usmUser);

/*
 * C type definitions for SNMP-USER-BASED-SM-MIB::usmUserEntry.
 */

typedef struct usmUserEntry {
    guchar   usmUserEngineID[32];
    gsize    _usmUserEngineIDLength;
    guchar   usmUserName[32];
    gsize    _usmUserNameLength;
    guchar   *usmUserSecurityName;
    gsize    _usmUserSecurityNameLength;
    guint32  *usmUserCloneFrom;
    gsize    _usmUserCloneFromLength;
    guint32  *usmUserAuthProtocol;
    gsize    _usmUserAuthProtocolLength;
    guchar   *usmUserAuthKeyChange;
    gsize    _usmUserAuthKeyChangeLength;
    guchar   *usmUserOwnAuthKeyChange;
    gsize    _usmUserOwnAuthKeyChangeLength;
    guint32  *usmUserPrivProtocol;
    gsize    _usmUserPrivProtocolLength;
    guchar   *usmUserPrivKeyChange;
    gsize    _usmUserPrivKeyChangeLength;
    guchar   *usmUserOwnPrivKeyChange;
    gsize    _usmUserOwnPrivKeyChangeLength;
    guchar   *usmUserPublic;
    gsize    _usmUserPublicLength;
    gint32   *usmUserStorageType;
    gint32   *usmUserStatus;
} usmUserEntry_t;

extern int
snmp_user_based_sm_mib_get_usmUserTable(host_snmp *s, usmUserEntry_t ***usmUserEntry);

extern void
snmp_user_based_sm_mib_free_usmUserTable(usmUserEntry_t **usmUserEntry);

extern usmUserEntry_t *
snmp_user_based_sm_mib_new_usmUserEntry();

extern int
snmp_user_based_sm_mib_get_usmUserEntry(host_snmp *s, usmUserEntry_t **usmUserEntry);

extern int
snmp_user_based_sm_mib_set_usmUserEntry(host_snmp *s, usmUserEntry_t *usmUserEntry);

extern void
snmp_user_based_sm_mib_free_usmUserEntry(usmUserEntry_t *usmUserEntry);


#endif /* _SNMP_USER_BASED_SM_MIB_H_ */
