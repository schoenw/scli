/*							-- DO NOT EDIT --
 * Generated by smidump version 0.4.5:
 *   smidump -f scli SFLOW5-MIB
 *
 * Derived from SFLOW5-MIB:
 *   The MIB module for managing the generation and transportation
 *   of sFlow data records.
 *
 * Revision 2003-10-18 00:00:
 *   Version 1.3 (draft 5)
 *   
 *   Allow set to SFlowReceiver if it doesn't change
 *   value.
 *
 * Revision 2003-09-24 00:00:
 *   [Revision added by libsmi due to a LAST-UPDATED clause.]
 *
 * Revision 2003-09-24 00:00:
 *   Version 1.3 (draft 4)
 *   
 *   Default value of sFlowRcvrAddress should be '00000000' h.
 *   Default value of sFlowCpReceiver should be 0.
 *
 * Revision 2003-04-08 00:00:
 *   Version 1.3 (draft 3)
 *   
 *   Clarify semantics of counter polling interval, 
 *   sFlowCpInterval.
 *
 * Revision 2002-09-17 00:00:
 *   Version 1.3 (draft 2)
 *   
 *   Adds support for multiple sFlow samplers per sFlowDataSource.
 *   Moved to sflow.org enterprise number.
 *   Splits flow sampling, counter polling and receiver 
 *   specification into separate tables.
 *
 * Revision 2001-07-31 00:00:
 *   Version 1.2
 *   
 *   Brings MIB into SMI v2 compliance.
 *
 * Revision 2001-05-01 00:00:
 *   Version 1.1
 *   
 *   Adds sfDatagramVersion.
 *
 * $Id$
 */

#ifndef _SFLOW5_MIB_H_
#define _SFLOW5_MIB_H_

#include "gsnmp.h"

G_BEGIN_DECLS

/*
 * C type definitions for SFLOW5-MIB::sFlowAgent.
 */

#define SFLOW5_MIB_SFLOWVERSION          (1 << 0) 
#define SFLOW5_MIB_SFLOWAGENTADDRESSTYPE (1 << 1) 
#define SFLOW5_MIB_SFLOWAGENTADDRESS     (1 << 2) 

typedef struct {
    guchar   *sFlowVersion;              /* ro SNMP-FRAMEWORK-MIB::SnmpAdminString */
#define SFLOW5_MIB_SFLOWVERSIONMINLENGTH 0
#define SFLOW5_MIB_SFLOWVERSIONMAXLENGTH 255
    guint16  _sFlowVersionLength;
    gint32   *sFlowAgentAddressType;     /* ro INET-ADDRESS-MIB::InetAddressType */
    guchar   *sFlowAgentAddress;         /* ro INET-ADDRESS-MIB::InetAddress */
#define SFLOW5_MIB_SFLOWAGENTADDRESSMINLENGTH 0
#define SFLOW5_MIB_SFLOWAGENTADDRESSMAXLENGTH 255
    guint16  _sFlowAgentAddressLength;
} sflow5_mib_sFlowAgent_t;

extern sflow5_mib_sFlowAgent_t *
sflow5_mib_new_sFlowAgent(void);

extern void
sflow5_mib_get_sFlowAgent(GNetSnmp *s, sflow5_mib_sFlowAgent_t **sFlowAgent, gint64 mask);

extern void
sflow5_mib_free_sFlowAgent(sflow5_mib_sFlowAgent_t *sFlowAgent);

/*
 * C type definitions for SFLOW5-MIB::sFlowRcvrEntry.
 */

#define SFLOW5_MIB_SFLOWRCVROWNER               (1 << 0) 
#define SFLOW5_MIB_SFLOWRCVRTIMEOUT             (1 << 1) 
#define SFLOW5_MIB_SFLOWRCVRMAXIMUMDATAGRAMSIZE (1 << 2) 
#define SFLOW5_MIB_SFLOWRCVRADDRESSTYPE         (1 << 3) 
#define SFLOW5_MIB_SFLOWRCVRADDRESS             (1 << 4) 
#define SFLOW5_MIB_SFLOWRCVRPORT                (1 << 5) 
#define SFLOW5_MIB_SFLOWRCVRDATAGRAMVERSION     (1 << 6) 

typedef struct {
    gint32   sFlowRcvrIndex;                    /* na */
    guchar   *sFlowRcvrOwner;                   /* rw RMON-MIB::OwnerString */
#define SFLOW5_MIB_SFLOWRCVROWNERMINLENGTH 0
#define SFLOW5_MIB_SFLOWRCVROWNERMAXLENGTH 127
    guint16  _sFlowRcvrOwnerLength;
    gint32   *sFlowRcvrTimeout;                 /* rw Integer32 */
    gint32   *sFlowRcvrMaximumDatagramSize;     /* rw Integer32 */
    gint32   *sFlowRcvrAddressType;             /* rw INET-ADDRESS-MIB::InetAddressType */
    guchar   *sFlowRcvrAddress;                 /* rw INET-ADDRESS-MIB::InetAddress */
#define SFLOW5_MIB_SFLOWRCVRADDRESSMINLENGTH 0
#define SFLOW5_MIB_SFLOWRCVRADDRESSMAXLENGTH 255
    guint16  _sFlowRcvrAddressLength;
    gint32   *sFlowRcvrPort;                    /* rw Integer32 */
    gint32   *sFlowRcvrDatagramVersion;         /* rw Integer32 */
} sflow5_mib_sFlowRcvrEntry_t;

extern void
sflow5_mib_get_sFlowRcvrTable(GNetSnmp *s, sflow5_mib_sFlowRcvrEntry_t ***sFlowRcvrEntry, gint64 mask);

extern void
sflow5_mib_free_sFlowRcvrTable(sflow5_mib_sFlowRcvrEntry_t **sFlowRcvrEntry);

extern sflow5_mib_sFlowRcvrEntry_t *
sflow5_mib_new_sFlowRcvrEntry(void);

extern void
sflow5_mib_get_sFlowRcvrEntry(GNetSnmp *s, sflow5_mib_sFlowRcvrEntry_t **sFlowRcvrEntry, gint32 sFlowRcvrIndex, gint64 mask);

extern void
sflow5_mib_set_sFlowRcvrEntry(GNetSnmp *s, sflow5_mib_sFlowRcvrEntry_t *sFlowRcvrEntry, gint64 mask);

extern void
sflow5_mib_free_sFlowRcvrEntry(sflow5_mib_sFlowRcvrEntry_t *sFlowRcvrEntry);

/*
 * C type definitions for SFLOW5-MIB::sFlowFsEntry.
 */

#define SFLOW5_MIB_SFLOWFSRECEIVER           (1 << 0) 
#define SFLOW5_MIB_SFLOWFSPACKETSAMPLINGRATE (1 << 1) 
#define SFLOW5_MIB_SFLOWFSMAXIMUMHEADERSIZE  (1 << 2) 

typedef struct {
    guint32  sFlowFsDataSource[116];          /* na SFLOW5-MIB::SFlowDataSource */
#define SFLOW5_MIB_SFLOWFSDATASOURCEMINLENGTH 0
#define SFLOW5_MIB_SFLOWFSDATASOURCEMAXLENGTH 116
    guint16  _sFlowFsDataSourceLength;
    gint32   sFlowFsInstance;                /* na SFLOW5-MIB::SFlowInstance */
    gint32   *sFlowFsReceiver;               /* rw SFLOW5-MIB::SFlowReceiver */
    gint32   *sFlowFsPacketSamplingRate;     /* rw Integer32 */
    gint32   *sFlowFsMaximumHeaderSize;      /* rw Integer32 */
} sflow5_mib_sFlowFsEntry_t;

extern void
sflow5_mib_get_sFlowFsTable(GNetSnmp *s, sflow5_mib_sFlowFsEntry_t ***sFlowFsEntry, gint64 mask);

extern void
sflow5_mib_free_sFlowFsTable(sflow5_mib_sFlowFsEntry_t **sFlowFsEntry);

extern sflow5_mib_sFlowFsEntry_t *
sflow5_mib_new_sFlowFsEntry(void);

extern void
sflow5_mib_get_sFlowFsEntry(GNetSnmp *s, sflow5_mib_sFlowFsEntry_t **sFlowFsEntry, guint32 *sFlowFsDataSource, guint16 _sFlowFsDataSourceLength, gint32 sFlowFsInstance, gint64 mask);

extern void
sflow5_mib_set_sFlowFsEntry(GNetSnmp *s, sflow5_mib_sFlowFsEntry_t *sFlowFsEntry, gint64 mask);

extern void
sflow5_mib_free_sFlowFsEntry(sflow5_mib_sFlowFsEntry_t *sFlowFsEntry);

/*
 * C type definitions for SFLOW5-MIB::sFlowCpEntry.
 */

#define SFLOW5_MIB_SFLOWCPRECEIVER (1 << 0) 
#define SFLOW5_MIB_SFLOWCPINTERVAL (1 << 1) 

typedef struct {
    guint32  sFlowCpDataSource[116];/* na SFLOW5-MIB::SFlowDataSource */
#define SFLOW5_MIB_SFLOWCPDATASOURCEMINLENGTH 0
#define SFLOW5_MIB_SFLOWCPDATASOURCEMAXLENGTH 116
    guint16  _sFlowCpDataSourceLength;
    gint32   sFlowCpInstance;      /* na SFLOW5-MIB::SFlowInstance */
    gint32   *sFlowCpReceiver;     /* rw SFLOW5-MIB::SFlowReceiver */
    gint32   *sFlowCpInterval;     /* rw Integer32 */
} sflow5_mib_sFlowCpEntry_t;

extern void
sflow5_mib_get_sFlowCpTable(GNetSnmp *s, sflow5_mib_sFlowCpEntry_t ***sFlowCpEntry, gint64 mask);

extern void
sflow5_mib_free_sFlowCpTable(sflow5_mib_sFlowCpEntry_t **sFlowCpEntry);

extern sflow5_mib_sFlowCpEntry_t *
sflow5_mib_new_sFlowCpEntry(void);

extern void
sflow5_mib_get_sFlowCpEntry(GNetSnmp *s, sflow5_mib_sFlowCpEntry_t **sFlowCpEntry, guint32 *sFlowCpDataSource, guint16 _sFlowCpDataSourceLength, gint32 sFlowCpInstance, gint64 mask);

extern void
sflow5_mib_set_sFlowCpEntry(GNetSnmp *s, sflow5_mib_sFlowCpEntry_t *sFlowCpEntry, gint64 mask);

extern void
sflow5_mib_free_sFlowCpEntry(sflow5_mib_sFlowCpEntry_t *sFlowCpEntry);


G_END_DECLS

#endif /* _SFLOW5_MIB_H_ */
