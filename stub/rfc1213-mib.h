/*							-- DO NOT EDIT --
 * This file has been generated by smidump
 * version 0.2.17 for the scli package.
 *
 * Derived from RFC1213-MIB:
 *
 * $Id$
 */

#ifndef _RFC1213_MIB_H_
#define _RFC1213_MIB_H_

#include "g_snmp.h"

/*
 * Tables to map enumerations to strings and vice versa.
 */

#define RFC1213_MIB_IFTYPE_OTHER	1
#define RFC1213_MIB_IFTYPE_REGULAR1822	2
#define RFC1213_MIB_IFTYPE_HDH1822	3
#define RFC1213_MIB_IFTYPE_DDN_X25	4
#define RFC1213_MIB_IFTYPE_RFC877_X25	5
#define RFC1213_MIB_IFTYPE_ETHERNET_CSMACD	6
#define RFC1213_MIB_IFTYPE_ISO88023_CSMACD	7
#define RFC1213_MIB_IFTYPE_ISO88024_TOKENBUS	8
#define RFC1213_MIB_IFTYPE_ISO88025_TOKENRING	9
#define RFC1213_MIB_IFTYPE_ISO88026_MAN	10
#define RFC1213_MIB_IFTYPE_STARLAN	11
#define RFC1213_MIB_IFTYPE_PROTEON_10MBIT	12
#define RFC1213_MIB_IFTYPE_PROTEON_80MBIT	13
#define RFC1213_MIB_IFTYPE_HYPERCHANNEL	14
#define RFC1213_MIB_IFTYPE_FDDI	15
#define RFC1213_MIB_IFTYPE_LAPB	16
#define RFC1213_MIB_IFTYPE_SDLC	17
#define RFC1213_MIB_IFTYPE_DS1	18
#define RFC1213_MIB_IFTYPE_E1	19
#define RFC1213_MIB_IFTYPE_BASICISDN	20
#define RFC1213_MIB_IFTYPE_PRIMARYISDN	21
#define RFC1213_MIB_IFTYPE_PROPPOINTTOPOINTSERIAL	22
#define RFC1213_MIB_IFTYPE_PPP	23
#define RFC1213_MIB_IFTYPE_SOFTWARELOOPBACK	24
#define RFC1213_MIB_IFTYPE_EON	25
#define RFC1213_MIB_IFTYPE_ETHERNET_3MBIT	26
#define RFC1213_MIB_IFTYPE_NSIP	27
#define RFC1213_MIB_IFTYPE_SLIP	28
#define RFC1213_MIB_IFTYPE_ULTRA	29
#define RFC1213_MIB_IFTYPE_DS3	30
#define RFC1213_MIB_IFTYPE_SIP	31
#define RFC1213_MIB_IFTYPE_FRAME_RELAY	32

extern GSnmpEnum const rfc1213_mib_enums_ifType[];

#define RFC1213_MIB_IFADMINSTATUS_UP	1
#define RFC1213_MIB_IFADMINSTATUS_DOWN	2
#define RFC1213_MIB_IFADMINSTATUS_TESTING	3

extern GSnmpEnum const rfc1213_mib_enums_ifAdminStatus[];

#define RFC1213_MIB_IFOPERSTATUS_UP	1
#define RFC1213_MIB_IFOPERSTATUS_DOWN	2
#define RFC1213_MIB_IFOPERSTATUS_TESTING	3

extern GSnmpEnum const rfc1213_mib_enums_ifOperStatus[];

#define RFC1213_MIB_IPFORWARDING_FORWARDING	1
#define RFC1213_MIB_IPFORWARDING_NOT_FORWARDING	2

extern GSnmpEnum const rfc1213_mib_enums_ipForwarding[];

#define RFC1213_MIB_IPROUTETYPE_OTHER	1
#define RFC1213_MIB_IPROUTETYPE_INVALID	2
#define RFC1213_MIB_IPROUTETYPE_DIRECT	3
#define RFC1213_MIB_IPROUTETYPE_INDIRECT	4

extern GSnmpEnum const rfc1213_mib_enums_ipRouteType[];

#define RFC1213_MIB_IPROUTEPROTO_OTHER	1
#define RFC1213_MIB_IPROUTEPROTO_LOCAL	2
#define RFC1213_MIB_IPROUTEPROTO_NETMGMT	3
#define RFC1213_MIB_IPROUTEPROTO_ICMP	4
#define RFC1213_MIB_IPROUTEPROTO_EGP	5
#define RFC1213_MIB_IPROUTEPROTO_GGP	6
#define RFC1213_MIB_IPROUTEPROTO_HELLO	7
#define RFC1213_MIB_IPROUTEPROTO_RIP	8
#define RFC1213_MIB_IPROUTEPROTO_IS_IS	9
#define RFC1213_MIB_IPROUTEPROTO_ES_IS	10
#define RFC1213_MIB_IPROUTEPROTO_CISCOIGRP	11
#define RFC1213_MIB_IPROUTEPROTO_BBNSPFIGP	12
#define RFC1213_MIB_IPROUTEPROTO_OSPF	13
#define RFC1213_MIB_IPROUTEPROTO_BGP	14

extern GSnmpEnum const rfc1213_mib_enums_ipRouteProto[];

#define RFC1213_MIB_IPNETTOMEDIATYPE_OTHER	1
#define RFC1213_MIB_IPNETTOMEDIATYPE_INVALID	2
#define RFC1213_MIB_IPNETTOMEDIATYPE_DYNAMIC	3
#define RFC1213_MIB_IPNETTOMEDIATYPE_STATIC	4

extern GSnmpEnum const rfc1213_mib_enums_ipNetToMediaType[];

#define RFC1213_MIB_TCPRTOALGORITHM_OTHER	1
#define RFC1213_MIB_TCPRTOALGORITHM_CONSTANT	2
#define RFC1213_MIB_TCPRTOALGORITHM_RSRE	3
#define RFC1213_MIB_TCPRTOALGORITHM_VANJ	4

extern GSnmpEnum const rfc1213_mib_enums_tcpRtoAlgorithm[];

#define RFC1213_MIB_TCPCONNSTATE_CLOSED	1
#define RFC1213_MIB_TCPCONNSTATE_LISTEN	2
#define RFC1213_MIB_TCPCONNSTATE_SYNSENT	3
#define RFC1213_MIB_TCPCONNSTATE_SYNRECEIVED	4
#define RFC1213_MIB_TCPCONNSTATE_ESTABLISHED	5
#define RFC1213_MIB_TCPCONNSTATE_FINWAIT1	6
#define RFC1213_MIB_TCPCONNSTATE_FINWAIT2	7
#define RFC1213_MIB_TCPCONNSTATE_CLOSEWAIT	8
#define RFC1213_MIB_TCPCONNSTATE_LASTACK	9
#define RFC1213_MIB_TCPCONNSTATE_CLOSING	10
#define RFC1213_MIB_TCPCONNSTATE_TIMEWAIT	11
#define RFC1213_MIB_TCPCONNSTATE_DELETETCB	12

extern GSnmpEnum const rfc1213_mib_enums_tcpConnState[];

#define RFC1213_MIB_EGPNEIGHSTATE_IDLE	1
#define RFC1213_MIB_EGPNEIGHSTATE_ACQUISITION	2
#define RFC1213_MIB_EGPNEIGHSTATE_DOWN	3
#define RFC1213_MIB_EGPNEIGHSTATE_UP	4
#define RFC1213_MIB_EGPNEIGHSTATE_CEASE	5

extern GSnmpEnum const rfc1213_mib_enums_egpNeighState[];

#define RFC1213_MIB_EGPNEIGHMODE_ACTIVE	1
#define RFC1213_MIB_EGPNEIGHMODE_PASSIVE	2

extern GSnmpEnum const rfc1213_mib_enums_egpNeighMode[];

#define RFC1213_MIB_EGPNEIGHEVENTTRIGGER_START	1
#define RFC1213_MIB_EGPNEIGHEVENTTRIGGER_STOP	2

extern GSnmpEnum const rfc1213_mib_enums_egpNeighEventTrigger[];

#define RFC1213_MIB_SNMPENABLEAUTHENTRAPS_ENABLED	1
#define RFC1213_MIB_SNMPENABLEAUTHENTRAPS_DISABLED	2

extern GSnmpEnum const rfc1213_mib_enums_snmpEnableAuthenTraps[];


/*
 * C type definitions for RFC1213-MIB::system.
 */

#define RFC1213_MIB_SYSDESCR	0x1 
#define RFC1213_MIB_SYSOBJECTID	0x2 
#define RFC1213_MIB_SYSUPTIME	0x4 
#define RFC1213_MIB_SYSCONTACT	0x8 
#define RFC1213_MIB_SYSNAME	0x10 
#define RFC1213_MIB_SYSLOCATION	0x20 
#define RFC1213_MIB_SYSSERVICES	0x40 

typedef struct {
    guchar   *sysDescr;
    gsize    _sysDescrLength;
    guint32  *sysObjectID;
    gsize    _sysObjectIDLength;
    guint32  *sysUpTime;
    guchar   *sysContact;
    gsize    _sysContactLength;
    guchar   *sysName;
    gsize    _sysNameLength;
    guchar   *sysLocation;
    gsize    _sysLocationLength;
    gint32   *sysServices;
} rfc1213_mib_system_t;

extern rfc1213_mib_system_t *
rfc1213_mib_new_system(void);

extern void
rfc1213_mib_get_system(GSnmpSession *s, rfc1213_mib_system_t **system, gint mask);

extern void
rfc1213_mib_set_system(GSnmpSession *s, rfc1213_mib_system_t *system, gint mask);

extern void
rfc1213_mib_free_system(rfc1213_mib_system_t *system);

/*
 * C type definitions for RFC1213-MIB::interfaces.
 */

#define RFC1213_MIB_IFNUMBER	0x1 

typedef struct {
    gint32   *ifNumber;
} rfc1213_mib_interfaces_t;

extern rfc1213_mib_interfaces_t *
rfc1213_mib_new_interfaces(void);

extern void
rfc1213_mib_get_interfaces(GSnmpSession *s, rfc1213_mib_interfaces_t **interfaces, gint mask);

extern void
rfc1213_mib_free_interfaces(rfc1213_mib_interfaces_t *interfaces);

/*
 * C type definitions for RFC1213-MIB::ifEntry.
 */

#define RFC1213_MIB_IFINDEX	0x1 
#define RFC1213_MIB_IFDESCR	0x2 
#define RFC1213_MIB_IFTYPE	0x4 
#define RFC1213_MIB_IFMTU	0x8 
#define RFC1213_MIB_IFSPEED	0x10 
#define RFC1213_MIB_IFPHYSADDRESS	0x20 
#define RFC1213_MIB_IFADMINSTATUS	0x40 
#define RFC1213_MIB_IFOPERSTATUS	0x80 
#define RFC1213_MIB_IFLASTCHANGE	0x100 
#define RFC1213_MIB_IFINOCTETS	0x200 
#define RFC1213_MIB_IFINUCASTPKTS	0x400 
#define RFC1213_MIB_IFINNUCASTPKTS	0x800 
#define RFC1213_MIB_IFINDISCARDS	0x1000 
#define RFC1213_MIB_IFINERRORS	0x2000 
#define RFC1213_MIB_IFINUNKNOWNPROTOS	0x4000 
#define RFC1213_MIB_IFOUTOCTETS	0x8000 
#define RFC1213_MIB_IFOUTUCASTPKTS	0x10000 
#define RFC1213_MIB_IFOUTNUCASTPKTS	0x20000 
#define RFC1213_MIB_IFOUTDISCARDS	0x40000 
#define RFC1213_MIB_IFOUTERRORS	0x80000 
#define RFC1213_MIB_IFOUTQLEN	0x100000 
#define RFC1213_MIB_IFSPECIFIC	0x200000 

typedef struct {
    gint32   ifIndex;
    guchar   *ifDescr;
    gsize    _ifDescrLength;
    gint32   *ifType;
    gint32   *ifMtu;
    guint32  *ifSpeed;
    guchar   *ifPhysAddress;
    gsize    _ifPhysAddressLength;
    gint32   *ifAdminStatus;
    gint32   *ifOperStatus;
    guint32  *ifLastChange;
    guint32  *ifInOctets;
    guint32  *ifInUcastPkts;
    guint32  *ifInNUcastPkts;
    guint32  *ifInDiscards;
    guint32  *ifInErrors;
    guint32  *ifInUnknownProtos;
    guint32  *ifOutOctets;
    guint32  *ifOutUcastPkts;
    guint32  *ifOutNUcastPkts;
    guint32  *ifOutDiscards;
    guint32  *ifOutErrors;
    guint32  *ifOutQLen;
    guint32  *ifSpecific;
    gsize    _ifSpecificLength;
} rfc1213_mib_ifEntry_t;

extern void
rfc1213_mib_get_ifTable(GSnmpSession *s, rfc1213_mib_ifEntry_t ***ifEntry, gint mask);

extern void
rfc1213_mib_free_ifTable(rfc1213_mib_ifEntry_t **ifEntry);

extern rfc1213_mib_ifEntry_t *
rfc1213_mib_new_ifEntry(void);

extern void
rfc1213_mib_get_ifEntry(GSnmpSession *s, rfc1213_mib_ifEntry_t **ifEntry, gint32 ifIndex, gint mask);

extern void
rfc1213_mib_set_ifEntry(GSnmpSession *s, rfc1213_mib_ifEntry_t *ifEntry, gint mask);

extern void
rfc1213_mib_free_ifEntry(rfc1213_mib_ifEntry_t *ifEntry);

/*
 * C type definitions for RFC1213-MIB::atEntry.
 */

#define RFC1213_MIB_ATIFINDEX	0x1 
#define RFC1213_MIB_ATPHYSADDRESS	0x2 
#define RFC1213_MIB_ATNETADDRESS	0x4 

typedef struct {
    gint32   atIfIndex;
    guchar   atNetAddress[4];
    guchar   *atPhysAddress;
    gsize    _atPhysAddressLength;
} rfc1213_mib_atEntry_t;

extern void
rfc1213_mib_get_atTable(GSnmpSession *s, rfc1213_mib_atEntry_t ***atEntry, gint mask);

extern void
rfc1213_mib_free_atTable(rfc1213_mib_atEntry_t **atEntry);

extern rfc1213_mib_atEntry_t *
rfc1213_mib_new_atEntry(void);

extern void
rfc1213_mib_get_atEntry(GSnmpSession *s, rfc1213_mib_atEntry_t **atEntry, gint32 atIfIndex, guchar *atNetAddress, gint mask);

extern void
rfc1213_mib_set_atEntry(GSnmpSession *s, rfc1213_mib_atEntry_t *atEntry, gint mask);

extern void
rfc1213_mib_free_atEntry(rfc1213_mib_atEntry_t *atEntry);

/*
 * C type definitions for RFC1213-MIB::ip.
 */

#define RFC1213_MIB_IPFORWARDING	0x1 
#define RFC1213_MIB_IPDEFAULTTTL	0x2 
#define RFC1213_MIB_IPINRECEIVES	0x4 
#define RFC1213_MIB_IPINHDRERRORS	0x8 
#define RFC1213_MIB_IPINADDRERRORS	0x10 
#define RFC1213_MIB_IPFORWDATAGRAMS	0x20 
#define RFC1213_MIB_IPINUNKNOWNPROTOS	0x40 
#define RFC1213_MIB_IPINDISCARDS	0x80 
#define RFC1213_MIB_IPINDELIVERS	0x100 
#define RFC1213_MIB_IPOUTREQUESTS	0x200 
#define RFC1213_MIB_IPOUTDISCARDS	0x400 
#define RFC1213_MIB_IPOUTNOROUTES	0x800 
#define RFC1213_MIB_IPREASMTIMEOUT	0x1000 
#define RFC1213_MIB_IPREASMREQDS	0x2000 
#define RFC1213_MIB_IPREASMOKS	0x4000 
#define RFC1213_MIB_IPREASMFAILS	0x8000 
#define RFC1213_MIB_IPFRAGOKS	0x10000 
#define RFC1213_MIB_IPFRAGFAILS	0x20000 
#define RFC1213_MIB_IPFRAGCREATES	0x40000 
#define RFC1213_MIB_IPROUTINGDISCARDS	0x80000 

typedef struct {
    gint32   *ipForwarding;
    gint32   *ipDefaultTTL;
    guint32  *ipInReceives;
    guint32  *ipInHdrErrors;
    guint32  *ipInAddrErrors;
    guint32  *ipForwDatagrams;
    guint32  *ipInUnknownProtos;
    guint32  *ipInDiscards;
    guint32  *ipInDelivers;
    guint32  *ipOutRequests;
    guint32  *ipOutDiscards;
    guint32  *ipOutNoRoutes;
    gint32   *ipReasmTimeout;
    guint32  *ipReasmReqds;
    guint32  *ipReasmOKs;
    guint32  *ipReasmFails;
    guint32  *ipFragOKs;
    guint32  *ipFragFails;
    guint32  *ipFragCreates;
    guint32  *ipRoutingDiscards;
} rfc1213_mib_ip_t;

extern rfc1213_mib_ip_t *
rfc1213_mib_new_ip(void);

extern void
rfc1213_mib_get_ip(GSnmpSession *s, rfc1213_mib_ip_t **ip, gint mask);

extern void
rfc1213_mib_set_ip(GSnmpSession *s, rfc1213_mib_ip_t *ip, gint mask);

extern void
rfc1213_mib_free_ip(rfc1213_mib_ip_t *ip);

/*
 * C type definitions for RFC1213-MIB::ipAddrEntry.
 */

#define RFC1213_MIB_IPADENTADDR	0x1 
#define RFC1213_MIB_IPADENTIFINDEX	0x2 
#define RFC1213_MIB_IPADENTNETMASK	0x4 
#define RFC1213_MIB_IPADENTBCASTADDR	0x8 
#define RFC1213_MIB_IPADENTREASMMAXSIZE	0x10 

typedef struct {
    guchar   ipAdEntAddr[4];
    gint32   *ipAdEntIfIndex;
    guchar   *ipAdEntNetMask;
    gint32   *ipAdEntBcastAddr;
    gint32   *ipAdEntReasmMaxSize;
} rfc1213_mib_ipAddrEntry_t;

extern void
rfc1213_mib_get_ipAddrTable(GSnmpSession *s, rfc1213_mib_ipAddrEntry_t ***ipAddrEntry, gint mask);

extern void
rfc1213_mib_free_ipAddrTable(rfc1213_mib_ipAddrEntry_t **ipAddrEntry);

extern rfc1213_mib_ipAddrEntry_t *
rfc1213_mib_new_ipAddrEntry(void);

extern void
rfc1213_mib_get_ipAddrEntry(GSnmpSession *s, rfc1213_mib_ipAddrEntry_t **ipAddrEntry, guchar *ipAdEntAddr, gint mask);

extern void
rfc1213_mib_free_ipAddrEntry(rfc1213_mib_ipAddrEntry_t *ipAddrEntry);

/*
 * C type definitions for RFC1213-MIB::ipRouteEntry.
 */

#define RFC1213_MIB_IPROUTEDEST	0x1 
#define RFC1213_MIB_IPROUTEIFINDEX	0x2 
#define RFC1213_MIB_IPROUTEMETRIC1	0x4 
#define RFC1213_MIB_IPROUTEMETRIC2	0x8 
#define RFC1213_MIB_IPROUTEMETRIC3	0x10 
#define RFC1213_MIB_IPROUTEMETRIC4	0x20 
#define RFC1213_MIB_IPROUTENEXTHOP	0x40 
#define RFC1213_MIB_IPROUTETYPE	0x80 
#define RFC1213_MIB_IPROUTEPROTO	0x100 
#define RFC1213_MIB_IPROUTEAGE	0x200 
#define RFC1213_MIB_IPROUTEMASK	0x400 
#define RFC1213_MIB_IPROUTEMETRIC5	0x800 
#define RFC1213_MIB_IPROUTEINFO	0x1000 

typedef struct {
    guchar   ipRouteDest[4];
    gint32   *ipRouteIfIndex;
    gint32   *ipRouteMetric1;
    gint32   *ipRouteMetric2;
    gint32   *ipRouteMetric3;
    gint32   *ipRouteMetric4;
    guchar   *ipRouteNextHop;
    gint32   *ipRouteType;
    gint32   *ipRouteProto;
    gint32   *ipRouteAge;
    guchar   *ipRouteMask;
    gint32   *ipRouteMetric5;
    guint32  *ipRouteInfo;
    gsize    _ipRouteInfoLength;
} rfc1213_mib_ipRouteEntry_t;

extern void
rfc1213_mib_get_ipRouteTable(GSnmpSession *s, rfc1213_mib_ipRouteEntry_t ***ipRouteEntry, gint mask);

extern void
rfc1213_mib_free_ipRouteTable(rfc1213_mib_ipRouteEntry_t **ipRouteEntry);

extern rfc1213_mib_ipRouteEntry_t *
rfc1213_mib_new_ipRouteEntry(void);

extern void
rfc1213_mib_get_ipRouteEntry(GSnmpSession *s, rfc1213_mib_ipRouteEntry_t **ipRouteEntry, guchar *ipRouteDest, gint mask);

extern void
rfc1213_mib_set_ipRouteEntry(GSnmpSession *s, rfc1213_mib_ipRouteEntry_t *ipRouteEntry, gint mask);

extern void
rfc1213_mib_free_ipRouteEntry(rfc1213_mib_ipRouteEntry_t *ipRouteEntry);

/*
 * C type definitions for RFC1213-MIB::ipNetToMediaEntry.
 */

#define RFC1213_MIB_IPNETTOMEDIAIFINDEX	0x1 
#define RFC1213_MIB_IPNETTOMEDIAPHYSADDRESS	0x2 
#define RFC1213_MIB_IPNETTOMEDIANETADDRESS	0x4 
#define RFC1213_MIB_IPNETTOMEDIATYPE	0x8 

typedef struct {
    gint32   ipNetToMediaIfIndex;
    guchar   ipNetToMediaNetAddress[4];
    guchar   *ipNetToMediaPhysAddress;
    gsize    _ipNetToMediaPhysAddressLength;
    gint32   *ipNetToMediaType;
} rfc1213_mib_ipNetToMediaEntry_t;

extern void
rfc1213_mib_get_ipNetToMediaTable(GSnmpSession *s, rfc1213_mib_ipNetToMediaEntry_t ***ipNetToMediaEntry, gint mask);

extern void
rfc1213_mib_free_ipNetToMediaTable(rfc1213_mib_ipNetToMediaEntry_t **ipNetToMediaEntry);

extern rfc1213_mib_ipNetToMediaEntry_t *
rfc1213_mib_new_ipNetToMediaEntry(void);

extern void
rfc1213_mib_get_ipNetToMediaEntry(GSnmpSession *s, rfc1213_mib_ipNetToMediaEntry_t **ipNetToMediaEntry, gint32 ipNetToMediaIfIndex, guchar *ipNetToMediaNetAddress, gint mask);

extern void
rfc1213_mib_set_ipNetToMediaEntry(GSnmpSession *s, rfc1213_mib_ipNetToMediaEntry_t *ipNetToMediaEntry, gint mask);

extern void
rfc1213_mib_free_ipNetToMediaEntry(rfc1213_mib_ipNetToMediaEntry_t *ipNetToMediaEntry);

/*
 * C type definitions for RFC1213-MIB::icmp.
 */

#define RFC1213_MIB_ICMPINMSGS	0x1 
#define RFC1213_MIB_ICMPINERRORS	0x2 
#define RFC1213_MIB_ICMPINDESTUNREACHS	0x4 
#define RFC1213_MIB_ICMPINTIMEEXCDS	0x8 
#define RFC1213_MIB_ICMPINPARMPROBS	0x10 
#define RFC1213_MIB_ICMPINSRCQUENCHS	0x20 
#define RFC1213_MIB_ICMPINREDIRECTS	0x40 
#define RFC1213_MIB_ICMPINECHOS	0x80 
#define RFC1213_MIB_ICMPINECHOREPS	0x100 
#define RFC1213_MIB_ICMPINTIMESTAMPS	0x200 
#define RFC1213_MIB_ICMPINTIMESTAMPREPS	0x400 
#define RFC1213_MIB_ICMPINADDRMASKS	0x800 
#define RFC1213_MIB_ICMPINADDRMASKREPS	0x1000 
#define RFC1213_MIB_ICMPOUTMSGS	0x2000 
#define RFC1213_MIB_ICMPOUTERRORS	0x4000 
#define RFC1213_MIB_ICMPOUTDESTUNREACHS	0x8000 
#define RFC1213_MIB_ICMPOUTTIMEEXCDS	0x10000 
#define RFC1213_MIB_ICMPOUTPARMPROBS	0x20000 
#define RFC1213_MIB_ICMPOUTSRCQUENCHS	0x40000 
#define RFC1213_MIB_ICMPOUTREDIRECTS	0x80000 
#define RFC1213_MIB_ICMPOUTECHOS	0x100000 
#define RFC1213_MIB_ICMPOUTECHOREPS	0x200000 
#define RFC1213_MIB_ICMPOUTTIMESTAMPS	0x400000 
#define RFC1213_MIB_ICMPOUTTIMESTAMPREPS	0x800000 
#define RFC1213_MIB_ICMPOUTADDRMASKS	0x1000000 
#define RFC1213_MIB_ICMPOUTADDRMASKREPS	0x2000000 

typedef struct {
    guint32  *icmpInMsgs;
    guint32  *icmpInErrors;
    guint32  *icmpInDestUnreachs;
    guint32  *icmpInTimeExcds;
    guint32  *icmpInParmProbs;
    guint32  *icmpInSrcQuenchs;
    guint32  *icmpInRedirects;
    guint32  *icmpInEchos;
    guint32  *icmpInEchoReps;
    guint32  *icmpInTimestamps;
    guint32  *icmpInTimestampReps;
    guint32  *icmpInAddrMasks;
    guint32  *icmpInAddrMaskReps;
    guint32  *icmpOutMsgs;
    guint32  *icmpOutErrors;
    guint32  *icmpOutDestUnreachs;
    guint32  *icmpOutTimeExcds;
    guint32  *icmpOutParmProbs;
    guint32  *icmpOutSrcQuenchs;
    guint32  *icmpOutRedirects;
    guint32  *icmpOutEchos;
    guint32  *icmpOutEchoReps;
    guint32  *icmpOutTimestamps;
    guint32  *icmpOutTimestampReps;
    guint32  *icmpOutAddrMasks;
    guint32  *icmpOutAddrMaskReps;
} rfc1213_mib_icmp_t;

extern rfc1213_mib_icmp_t *
rfc1213_mib_new_icmp(void);

extern void
rfc1213_mib_get_icmp(GSnmpSession *s, rfc1213_mib_icmp_t **icmp, gint mask);

extern void
rfc1213_mib_free_icmp(rfc1213_mib_icmp_t *icmp);

/*
 * C type definitions for RFC1213-MIB::tcp.
 */

#define RFC1213_MIB_TCPRTOALGORITHM	0x1 
#define RFC1213_MIB_TCPRTOMIN	0x2 
#define RFC1213_MIB_TCPRTOMAX	0x4 
#define RFC1213_MIB_TCPMAXCONN	0x8 
#define RFC1213_MIB_TCPACTIVEOPENS	0x10 
#define RFC1213_MIB_TCPPASSIVEOPENS	0x20 
#define RFC1213_MIB_TCPATTEMPTFAILS	0x40 
#define RFC1213_MIB_TCPESTABRESETS	0x80 
#define RFC1213_MIB_TCPCURRESTAB	0x100 
#define RFC1213_MIB_TCPINSEGS	0x200 
#define RFC1213_MIB_TCPOUTSEGS	0x400 
#define RFC1213_MIB_TCPRETRANSSEGS	0x800 
#define RFC1213_MIB_TCPINERRS	0x1000 
#define RFC1213_MIB_TCPOUTRSTS	0x2000 

typedef struct {
    gint32   *tcpRtoAlgorithm;
    gint32   *tcpRtoMin;
    gint32   *tcpRtoMax;
    gint32   *tcpMaxConn;
    guint32  *tcpActiveOpens;
    guint32  *tcpPassiveOpens;
    guint32  *tcpAttemptFails;
    guint32  *tcpEstabResets;
    guint32  *tcpCurrEstab;
    guint32  *tcpInSegs;
    guint32  *tcpOutSegs;
    guint32  *tcpRetransSegs;
    guint32  *tcpInErrs;
    guint32  *tcpOutRsts;
} rfc1213_mib_tcp_t;

extern rfc1213_mib_tcp_t *
rfc1213_mib_new_tcp(void);

extern void
rfc1213_mib_get_tcp(GSnmpSession *s, rfc1213_mib_tcp_t **tcp, gint mask);

extern void
rfc1213_mib_free_tcp(rfc1213_mib_tcp_t *tcp);

/*
 * C type definitions for RFC1213-MIB::tcpConnEntry.
 */

#define RFC1213_MIB_TCPCONNSTATE	0x1 
#define RFC1213_MIB_TCPCONNLOCALADDRESS	0x2 
#define RFC1213_MIB_TCPCONNLOCALPORT	0x4 
#define RFC1213_MIB_TCPCONNREMADDRESS	0x8 
#define RFC1213_MIB_TCPCONNREMPORT	0x10 

typedef struct {
    guchar   tcpConnLocalAddress[4];
    gint32   tcpConnLocalPort;
    guchar   tcpConnRemAddress[4];
    gint32   tcpConnRemPort;
    gint32   *tcpConnState;
} rfc1213_mib_tcpConnEntry_t;

extern void
rfc1213_mib_get_tcpConnTable(GSnmpSession *s, rfc1213_mib_tcpConnEntry_t ***tcpConnEntry, gint mask);

extern void
rfc1213_mib_free_tcpConnTable(rfc1213_mib_tcpConnEntry_t **tcpConnEntry);

extern rfc1213_mib_tcpConnEntry_t *
rfc1213_mib_new_tcpConnEntry(void);

extern void
rfc1213_mib_get_tcpConnEntry(GSnmpSession *s, rfc1213_mib_tcpConnEntry_t **tcpConnEntry, guchar *tcpConnLocalAddress, gint32 tcpConnLocalPort, guchar *tcpConnRemAddress, gint32 tcpConnRemPort, gint mask);

extern void
rfc1213_mib_set_tcpConnEntry(GSnmpSession *s, rfc1213_mib_tcpConnEntry_t *tcpConnEntry, gint mask);

extern void
rfc1213_mib_free_tcpConnEntry(rfc1213_mib_tcpConnEntry_t *tcpConnEntry);

/*
 * C type definitions for RFC1213-MIB::udp.
 */

#define RFC1213_MIB_UDPINDATAGRAMS	0x1 
#define RFC1213_MIB_UDPNOPORTS	0x2 
#define RFC1213_MIB_UDPINERRORS	0x4 
#define RFC1213_MIB_UDPOUTDATAGRAMS	0x8 

typedef struct {
    guint32  *udpInDatagrams;
    guint32  *udpNoPorts;
    guint32  *udpInErrors;
    guint32  *udpOutDatagrams;
} rfc1213_mib_udp_t;

extern rfc1213_mib_udp_t *
rfc1213_mib_new_udp(void);

extern void
rfc1213_mib_get_udp(GSnmpSession *s, rfc1213_mib_udp_t **udp, gint mask);

extern void
rfc1213_mib_free_udp(rfc1213_mib_udp_t *udp);

/*
 * C type definitions for RFC1213-MIB::udpEntry.
 */

#define RFC1213_MIB_UDPLOCALADDRESS	0x1 
#define RFC1213_MIB_UDPLOCALPORT	0x2 

typedef struct {
    guchar   udpLocalAddress[4];
    gint32   udpLocalPort;
} rfc1213_mib_udpEntry_t;

extern void
rfc1213_mib_get_udpTable(GSnmpSession *s, rfc1213_mib_udpEntry_t ***udpEntry, gint mask);

extern void
rfc1213_mib_free_udpTable(rfc1213_mib_udpEntry_t **udpEntry);

extern rfc1213_mib_udpEntry_t *
rfc1213_mib_new_udpEntry(void);

extern void
rfc1213_mib_get_udpEntry(GSnmpSession *s, rfc1213_mib_udpEntry_t **udpEntry, guchar *udpLocalAddress, gint32 udpLocalPort, gint mask);

extern void
rfc1213_mib_free_udpEntry(rfc1213_mib_udpEntry_t *udpEntry);

/*
 * C type definitions for RFC1213-MIB::egp.
 */

#define RFC1213_MIB_EGPINMSGS	0x1 
#define RFC1213_MIB_EGPINERRORS	0x2 
#define RFC1213_MIB_EGPOUTMSGS	0x4 
#define RFC1213_MIB_EGPOUTERRORS	0x8 
#define RFC1213_MIB_EGPAS	0x10 

typedef struct {
    guint32  *egpInMsgs;
    guint32  *egpInErrors;
    guint32  *egpOutMsgs;
    guint32  *egpOutErrors;
    gint32   *egpAs;
} rfc1213_mib_egp_t;

extern rfc1213_mib_egp_t *
rfc1213_mib_new_egp(void);

extern void
rfc1213_mib_get_egp(GSnmpSession *s, rfc1213_mib_egp_t **egp, gint mask);

extern void
rfc1213_mib_free_egp(rfc1213_mib_egp_t *egp);

/*
 * C type definitions for RFC1213-MIB::egpNeighEntry.
 */

#define RFC1213_MIB_EGPNEIGHSTATE	0x1 
#define RFC1213_MIB_EGPNEIGHADDR	0x2 
#define RFC1213_MIB_EGPNEIGHAS	0x4 
#define RFC1213_MIB_EGPNEIGHINMSGS	0x8 
#define RFC1213_MIB_EGPNEIGHINERRS	0x10 
#define RFC1213_MIB_EGPNEIGHOUTMSGS	0x20 
#define RFC1213_MIB_EGPNEIGHOUTERRS	0x40 
#define RFC1213_MIB_EGPNEIGHINERRMSGS	0x80 
#define RFC1213_MIB_EGPNEIGHOUTERRMSGS	0x100 
#define RFC1213_MIB_EGPNEIGHSTATEUPS	0x200 
#define RFC1213_MIB_EGPNEIGHSTATEDOWNS	0x400 
#define RFC1213_MIB_EGPNEIGHINTERVALHELLO	0x800 
#define RFC1213_MIB_EGPNEIGHINTERVALPOLL	0x1000 
#define RFC1213_MIB_EGPNEIGHMODE	0x2000 
#define RFC1213_MIB_EGPNEIGHEVENTTRIGGER	0x4000 

typedef struct {
    guchar   egpNeighAddr[4];
    gint32   *egpNeighState;
    gint32   *egpNeighAs;
    guint32  *egpNeighInMsgs;
    guint32  *egpNeighInErrs;
    guint32  *egpNeighOutMsgs;
    guint32  *egpNeighOutErrs;
    guint32  *egpNeighInErrMsgs;
    guint32  *egpNeighOutErrMsgs;
    guint32  *egpNeighStateUps;
    guint32  *egpNeighStateDowns;
    gint32   *egpNeighIntervalHello;
    gint32   *egpNeighIntervalPoll;
    gint32   *egpNeighMode;
    gint32   *egpNeighEventTrigger;
} rfc1213_mib_egpNeighEntry_t;

extern void
rfc1213_mib_get_egpNeighTable(GSnmpSession *s, rfc1213_mib_egpNeighEntry_t ***egpNeighEntry, gint mask);

extern void
rfc1213_mib_free_egpNeighTable(rfc1213_mib_egpNeighEntry_t **egpNeighEntry);

extern rfc1213_mib_egpNeighEntry_t *
rfc1213_mib_new_egpNeighEntry(void);

extern void
rfc1213_mib_get_egpNeighEntry(GSnmpSession *s, rfc1213_mib_egpNeighEntry_t **egpNeighEntry, guchar *egpNeighAddr, gint mask);

extern void
rfc1213_mib_set_egpNeighEntry(GSnmpSession *s, rfc1213_mib_egpNeighEntry_t *egpNeighEntry, gint mask);

extern void
rfc1213_mib_free_egpNeighEntry(rfc1213_mib_egpNeighEntry_t *egpNeighEntry);

/*
 * C type definitions for RFC1213-MIB::snmp.
 */

#define RFC1213_MIB_SNMPINPKTS	0x1 
#define RFC1213_MIB_SNMPOUTPKTS	0x2 
#define RFC1213_MIB_SNMPINBADVERSIONS	0x4 
#define RFC1213_MIB_SNMPINBADCOMMUNITYNAMES	0x8 
#define RFC1213_MIB_SNMPINBADCOMMUNITYUSES	0x10 
#define RFC1213_MIB_SNMPINASNPARSEERRS	0x20 
#define RFC1213_MIB_SNMPINTOOBIGS	0x40 
#define RFC1213_MIB_SNMPINNOSUCHNAMES	0x80 
#define RFC1213_MIB_SNMPINBADVALUES	0x100 
#define RFC1213_MIB_SNMPINREADONLYS	0x200 
#define RFC1213_MIB_SNMPINGENERRS	0x400 
#define RFC1213_MIB_SNMPINTOTALREQVARS	0x800 
#define RFC1213_MIB_SNMPINTOTALSETVARS	0x1000 
#define RFC1213_MIB_SNMPINGETREQUESTS	0x2000 
#define RFC1213_MIB_SNMPINGETNEXTS	0x4000 
#define RFC1213_MIB_SNMPINSETREQUESTS	0x8000 
#define RFC1213_MIB_SNMPINGETRESPONSES	0x10000 
#define RFC1213_MIB_SNMPINTRAPS	0x20000 
#define RFC1213_MIB_SNMPOUTTOOBIGS	0x40000 
#define RFC1213_MIB_SNMPOUTNOSUCHNAMES	0x80000 
#define RFC1213_MIB_SNMPOUTBADVALUES	0x100000 
#define RFC1213_MIB_SNMPOUTGENERRS	0x200000 
#define RFC1213_MIB_SNMPOUTGETREQUESTS	0x400000 
#define RFC1213_MIB_SNMPOUTGETNEXTS	0x800000 
#define RFC1213_MIB_SNMPOUTSETREQUESTS	0x1000000 
#define RFC1213_MIB_SNMPOUTGETRESPONSES	0x2000000 
#define RFC1213_MIB_SNMPOUTTRAPS	0x4000000 
#define RFC1213_MIB_SNMPENABLEAUTHENTRAPS	0x8000000 

typedef struct {
    guint32  *snmpInPkts;
    guint32  *snmpOutPkts;
    guint32  *snmpInBadVersions;
    guint32  *snmpInBadCommunityNames;
    guint32  *snmpInBadCommunityUses;
    guint32  *snmpInASNParseErrs;
    guint32  *snmpInTooBigs;
    guint32  *snmpInNoSuchNames;
    guint32  *snmpInBadValues;
    guint32  *snmpInReadOnlys;
    guint32  *snmpInGenErrs;
    guint32  *snmpInTotalReqVars;
    guint32  *snmpInTotalSetVars;
    guint32  *snmpInGetRequests;
    guint32  *snmpInGetNexts;
    guint32  *snmpInSetRequests;
    guint32  *snmpInGetResponses;
    guint32  *snmpInTraps;
    guint32  *snmpOutTooBigs;
    guint32  *snmpOutNoSuchNames;
    guint32  *snmpOutBadValues;
    guint32  *snmpOutGenErrs;
    guint32  *snmpOutGetRequests;
    guint32  *snmpOutGetNexts;
    guint32  *snmpOutSetRequests;
    guint32  *snmpOutGetResponses;
    guint32  *snmpOutTraps;
    gint32   *snmpEnableAuthenTraps;
} rfc1213_mib_snmp_t;

extern rfc1213_mib_snmp_t *
rfc1213_mib_new_snmp(void);

extern void
rfc1213_mib_get_snmp(GSnmpSession *s, rfc1213_mib_snmp_t **snmp, gint mask);

extern void
rfc1213_mib_set_snmp(GSnmpSession *s, rfc1213_mib_snmp_t *snmp, gint mask);

extern void
rfc1213_mib_free_snmp(rfc1213_mib_snmp_t *snmp);


#endif /* _RFC1213_MIB_H_ */
