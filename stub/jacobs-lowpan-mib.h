/*							-- DO NOT EDIT --
 * Generated by smidump version 0.5.0:
 *   smidump -f scli \
 *     --scli-include='lowpanStats' JACOBS-LOWPAN-MIB
 *
 * Derived from JACOBS-LOWPAN-MIB:
 *   The MIB module for monitoring nodes implementing the IPv6
 *   over Low-Power Wireless Personal Area Networks (6LoWPAN)
 *   protocol.
 *   
 *   
 *   
 *   Copyright (c) 2014 IETF Trust and the persons identified as
 *   authors of the code.  All rights reserved.
 *   
 *   Redistribution and use in source and binary forms, with or
 *   without modification, is permitted pursuant to, and subject
 *   to the license terms contained in, the Simplified BSD
 *   License set forth in Section 4.c of the IETF Trust's
 *   Legal Provisions Relating to IETF Documents
 *   (http://trustee.ietf.org/license-info).
 *
 * Revision 2014-04-08 00:00:
 *   Initial version, published as RFC XXXX.
 *
 * $Id$
 */

#ifndef _JACOBS_LOWPAN_MIB_H_
#define _JACOBS_LOWPAN_MIB_H_

#include "gsnmp.h"

G_BEGIN_DECLS

/*
 * C type definitions for JACOBS-LOWPAN-MIB::lowpanStats.
 */

#define JACOBS_LOWPAN_MIB_LOWPANREASMTIMEOUT           (1 << 0) 
#define JACOBS_LOWPAN_MIB_LOWPANINRECEIVES             (1 << 1) 
#define JACOBS_LOWPAN_MIB_LOWPANINHDRERRORS            (1 << 2) 
#define JACOBS_LOWPAN_MIB_LOWPANINMESHRECEIVES         (1 << 3) 
#define JACOBS_LOWPAN_MIB_LOWPANINMESHFORWDS           (1 << 4) 
#define JACOBS_LOWPAN_MIB_LOWPANINMESHDELIVERS         (1 << 5) 
#define JACOBS_LOWPAN_MIB_LOWPANINREASMREQDS           (1 << 6) 
#define JACOBS_LOWPAN_MIB_LOWPANINREASMFAILS           (1 << 7) 
#define JACOBS_LOWPAN_MIB_LOWPANINREASMOKS             (1 << 8) 
#define JACOBS_LOWPAN_MIB_LOWPANINCOMPREQDS            (1 << 9) 
#define JACOBS_LOWPAN_MIB_LOWPANINCOMPFAILS            (1 << 10) 
#define JACOBS_LOWPAN_MIB_LOWPANINCOMPOKS              (1 << 11) 
#define JACOBS_LOWPAN_MIB_LOWPANINDISCARDS             (1 << 12) 
#define JACOBS_LOWPAN_MIB_LOWPANINDELIVERS             (1 << 13) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTREQUESTS            (1 << 14) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTCOMPREQDS           (1 << 15) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTCOMPFAILS           (1 << 16) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTCOMPOKS             (1 << 17) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTFRAGREQDS           (1 << 18) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTFRAGFAILS           (1 << 19) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTFRAGOKS             (1 << 20) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTFRAGCREATES         (1 << 21) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTMESHHOPLIMITEXCEEDS (1 << 22) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTMESHNOROUTES        (1 << 23) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTMESHREQUESTS        (1 << 24) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTMESHFORWDS          (1 << 25) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTMESHTRANSMITS       (1 << 26) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTDISCARDS            (1 << 27) 
#define JACOBS_LOWPAN_MIB_LOWPANOUTTRANSMITS           (1 << 28) 

typedef struct {
    guint32  *lowpanReasmTimeout;               /* ro Unsigned32 [seconds] */
    guint32  *lowpanInReceives;                 /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInHdrErrors;                /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInMeshReceives;             /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInMeshForwds;               /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInMeshDelivers;             /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInReasmReqds;               /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInReasmFails;               /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInReasmOKs;                 /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInCompReqds;                /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInCompFails;                /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInCompOKs;                  /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInDiscards;                 /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanInDelivers;                 /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutRequests;                /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutCompReqds;               /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutCompFails;               /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutCompOKs;                 /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutFragReqds;               /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutFragFails;               /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutFragOKs;                 /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutFragCreates;             /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutMeshHopLimitExceeds;     /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutMeshNoRoutes;            /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutMeshRequests;            /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutMeshForwds;              /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutMeshTransmits;           /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutDiscards;                /* ro SNMPv2-SMI::Counter32 */
    guint32  *lowpanOutTransmits;               /* ro SNMPv2-SMI::Counter32 */
} jacobs_lowpan_mib_lowpanStats_t;

extern jacobs_lowpan_mib_lowpanStats_t *
jacobs_lowpan_mib_new_lowpanStats(void);

extern void
jacobs_lowpan_mib_get_lowpanStats(GNetSnmp *s, jacobs_lowpan_mib_lowpanStats_t **lowpanStats, gint64 mask, GError **error);

extern void
jacobs_lowpan_mib_free_lowpanStats(jacobs_lowpan_mib_lowpanStats_t *lowpanStats);


G_END_DECLS

#endif /* _JACOBS_LOWPAN_MIB_H_ */
