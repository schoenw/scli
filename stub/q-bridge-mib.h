/*							-- DO NOT EDIT --
 * Generated by smidump version 0.4.5:
 *   smidump -f scli \
 *     --scli-include='dot1qBase|dot1qVlanStaticEntry' Q-BRIDGE-MIB
 *
 * Derived from Q-BRIDGE-MIB:
 *   The VLAN Bridge MIB module for managing Virtual Bridged
 *   Local Area Networks, as defined by IEEE 802.1Q-2003,
 *   including Restricted Vlan Registration defined by
 *   IEEE 802.1u-2001 and Vlan Classification defined by
 *   IEEE 802.1v-2001.
 *   
 *   Copyright (C) The Internet Society (2006).  This version of
 *   this MIB module is part of RFC 4363; See the RFC itself for
 *   full legal notices.
 *
 * Revision 2006-01-09 00:00:
 *   Added Vlan TEXTUAL-CONVENTIONs,
 *   dot1qPortRestrictedVlanRegistration, dot1vProtocol subtree,
 *   qBridgeClassificationDeviceGroup, qBridgePortGroup2,
 *   qBridgeClassificationPortGroup, and qBridgeCompliance2.
 *   Clarified dot1qForwardAllStaticPorts,
 *   qPortAcceptableFrameTypes, and qBridgeCompliance.
 *   Deprecated qBridgePortGroup and qBridgeCompliance.
 *
 * Revision 1999-08-25 00:00:
 *   The VLAN Bridge MIB module for managing Virtual Bridged
 *   Local Area Networks, as defined by IEEE 802.1Q-1998.
 *   
 *   Initial version, published as RFC 2674.
 *
 * $Id$
 */

#ifndef _Q_BRIDGE_MIB_H_
#define _Q_BRIDGE_MIB_H_

#include "gsnmp.h"

G_BEGIN_DECLS

/*
 * Tables to map enumerations to strings and vice versa.
 */

#define Q_BRIDGE_MIB_DOT1QVLANVERSIONNUMBER_VERSION1 1

extern GNetSnmpEnum const q_bridge_mib_enums_dot1qVlanVersionNumber[];


/*
 * C type definitions for Q-BRIDGE-MIB::dot1qBase.
 */

#define Q_BRIDGE_MIB_DOT1QVLANVERSIONNUMBER (1 << 0) 
#define Q_BRIDGE_MIB_DOT1QMAXVLANID         (1 << 1) 
#define Q_BRIDGE_MIB_DOT1QMAXSUPPORTEDVLANS (1 << 2) 
#define Q_BRIDGE_MIB_DOT1QNUMVLANS          (1 << 3) 
#define Q_BRIDGE_MIB_DOT1QGVRPSTATUS        (1 << 4) 

typedef struct {
    gint32   *dot1qVlanVersionNumber;     /* ro */
    gint32   *dot1qMaxVlanId;             /* ro Q-BRIDGE-MIB::VlanId */
    guint32  *dot1qMaxSupportedVlans;     /* ro Unsigned32 */
    guint32  *dot1qNumVlans;              /* ro Unsigned32 */
    gint32   *dot1qGvrpStatus;            /* rw P-BRIDGE-MIB::EnabledStatus */
} q_bridge_mib_dot1qBase_t;

extern q_bridge_mib_dot1qBase_t *
q_bridge_mib_new_dot1qBase(void);

extern void
q_bridge_mib_get_dot1qBase(GNetSnmp *s, q_bridge_mib_dot1qBase_t **dot1qBase, gint64 mask);

extern void
q_bridge_mib_set_dot1qBase(GNetSnmp *s, q_bridge_mib_dot1qBase_t *dot1qBase, gint64 mask);

extern void
q_bridge_mib_free_dot1qBase(q_bridge_mib_dot1qBase_t *dot1qBase);

/*
 * C type definitions for Q-BRIDGE-MIB::dot1qVlanStaticEntry.
 */

#define Q_BRIDGE_MIB_DOT1QVLANSTATICNAME           (1 << 0) 
#define Q_BRIDGE_MIB_DOT1QVLANSTATICEGRESSPORTS    (1 << 1) 
#define Q_BRIDGE_MIB_DOT1QVLANFORBIDDENEGRESSPORTS (1 << 2) 
#define Q_BRIDGE_MIB_DOT1QVLANSTATICUNTAGGEDPORTS  (1 << 3) 
#define Q_BRIDGE_MIB_DOT1QVLANSTATICROWSTATUS      (1 << 4) 

typedef struct {
    guint32  dot1qVlanIndex;                     /* na Q-BRIDGE-MIB::VlanIndex */
    guchar   *dot1qVlanStaticName;               /* rw */
#define Q_BRIDGE_MIB_DOT1QVLANSTATICNAMEMINLENGTH 0
#define Q_BRIDGE_MIB_DOT1QVLANSTATICNAMEMAXLENGTH 32
    guint16  _dot1qVlanStaticNameLength;
    guchar   *dot1qVlanStaticEgressPorts;        /* rw Q-BRIDGE-MIB::PortList */
#define Q_BRIDGE_MIB_DOT1QVLANSTATICEGRESSPORTSMINLENGTH 0
#define Q_BRIDGE_MIB_DOT1QVLANSTATICEGRESSPORTSMAXLENGTH 65535
    guint16  _dot1qVlanStaticEgressPortsLength;
    guchar   *dot1qVlanForbiddenEgressPorts;     /* rw Q-BRIDGE-MIB::PortList */
#define Q_BRIDGE_MIB_DOT1QVLANFORBIDDENEGRESSPORTSMINLENGTH 0
#define Q_BRIDGE_MIB_DOT1QVLANFORBIDDENEGRESSPORTSMAXLENGTH 65535
    guint16  _dot1qVlanForbiddenEgressPortsLength;
    guchar   *dot1qVlanStaticUntaggedPorts;      /* rw Q-BRIDGE-MIB::PortList */
#define Q_BRIDGE_MIB_DOT1QVLANSTATICUNTAGGEDPORTSMINLENGTH 0
#define Q_BRIDGE_MIB_DOT1QVLANSTATICUNTAGGEDPORTSMAXLENGTH 65535
    guint16  _dot1qVlanStaticUntaggedPortsLength;
    gint32   *dot1qVlanStaticRowStatus;          /* rw SNMPv2-TC::RowStatus */
} q_bridge_mib_dot1qVlanStaticEntry_t;

extern void
q_bridge_mib_get_dot1qVlanStaticTable(GNetSnmp *s, q_bridge_mib_dot1qVlanStaticEntry_t ***dot1qVlanStaticEntry, gint64 mask);

extern void
q_bridge_mib_free_dot1qVlanStaticTable(q_bridge_mib_dot1qVlanStaticEntry_t **dot1qVlanStaticEntry);

extern q_bridge_mib_dot1qVlanStaticEntry_t *
q_bridge_mib_new_dot1qVlanStaticEntry(void);

extern void
q_bridge_mib_get_dot1qVlanStaticEntry(GNetSnmp *s, q_bridge_mib_dot1qVlanStaticEntry_t **dot1qVlanStaticEntry, guint32 dot1qVlanIndex, gint64 mask);

extern void
q_bridge_mib_set_dot1qVlanStaticEntry(GNetSnmp *s, q_bridge_mib_dot1qVlanStaticEntry_t *dot1qVlanStaticEntry, gint64 mask);

extern void
q_bridge_mib_free_dot1qVlanStaticEntry(q_bridge_mib_dot1qVlanStaticEntry_t *dot1qVlanStaticEntry);


G_END_DECLS

#endif /* _Q_BRIDGE_MIB_H_ */
