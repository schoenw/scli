/*							-- DO NOT EDIT --
 * This file has been generated by smidump
 * version 0.3.1 for the scli package.
 *
 * Options:
 *   --scli-include='isdnBasicRateEntry|isdnBearerEntry'
 *
 * Derived from ISDN-MIB:
 *   The MIB module to describe the
 *   management of ISDN interfaces.
 *
 * Revision 1996-09-23 16:42:
 *   [Revision added by libsmi due to a LAST-UPDATED clause.]
 *
 * $Id$
 */

#ifndef _ISDN_MIB_H_
#define _ISDN_MIB_H_

#include "g_snmp.h"

/*
 * Tables to map enumerations to strings and vice versa.
 */

#define ISDN_MIB_ISDNBASICRATEIFTYPE_ISDNS 75
#define ISDN_MIB_ISDNBASICRATEIFTYPE_ISDNU 76

extern GSnmpEnum const isdn_mib_enums_isdnBasicRateIfType[];

#define ISDN_MIB_ISDNBASICRATELINETOPOLOGY_POINTTOPOINT      1
#define ISDN_MIB_ISDNBASICRATELINETOPOLOGY_POINTTOMULTIPOINT 2

extern GSnmpEnum const isdn_mib_enums_isdnBasicRateLineTopology[];

#define ISDN_MIB_ISDNBASICRATEIFMODE_TE 1
#define ISDN_MIB_ISDNBASICRATEIFMODE_NT 2

extern GSnmpEnum const isdn_mib_enums_isdnBasicRateIfMode[];

#define ISDN_MIB_ISDNBASICRATESIGNALMODE_ACTIVE   1
#define ISDN_MIB_ISDNBASICRATESIGNALMODE_INACTIVE 2

extern GSnmpEnum const isdn_mib_enums_isdnBasicRateSignalMode[];

#define ISDN_MIB_ISDNBEARERCHANNELTYPE_DIALUP 1
#define ISDN_MIB_ISDNBEARERCHANNELTYPE_LEASED 2

extern GSnmpEnum const isdn_mib_enums_isdnBearerChannelType[];

#define ISDN_MIB_ISDNBEAREROPERSTATUS_IDLE       1
#define ISDN_MIB_ISDNBEAREROPERSTATUS_CONNECTING 2
#define ISDN_MIB_ISDNBEAREROPERSTATUS_CONNECTED  3
#define ISDN_MIB_ISDNBEAREROPERSTATUS_ACTIVE     4

extern GSnmpEnum const isdn_mib_enums_isdnBearerOperStatus[];

#define ISDN_MIB_ISDNBEARERCALLORIGIN_UNKNOWN   1
#define ISDN_MIB_ISDNBEARERCALLORIGIN_ORIGINATE 2
#define ISDN_MIB_ISDNBEARERCALLORIGIN_ANSWER    3
#define ISDN_MIB_ISDNBEARERCALLORIGIN_CALLBACK  4

extern GSnmpEnum const isdn_mib_enums_isdnBearerCallOrigin[];

#define ISDN_MIB_ISDNBEARERINFOTYPE_UNKNOWN               1
#define ISDN_MIB_ISDNBEARERINFOTYPE_SPEECH                2
#define ISDN_MIB_ISDNBEARERINFOTYPE_UNRESTRICTEDDIGITAL   3
#define ISDN_MIB_ISDNBEARERINFOTYPE_UNRESTRICTEDDIGITAL56 4
#define ISDN_MIB_ISDNBEARERINFOTYPE_RESTRICTEDDIGITAL     5
#define ISDN_MIB_ISDNBEARERINFOTYPE_AUDIO31               6
#define ISDN_MIB_ISDNBEARERINFOTYPE_AUDIO7                7
#define ISDN_MIB_ISDNBEARERINFOTYPE_VIDEO                 8
#define ISDN_MIB_ISDNBEARERINFOTYPE_PACKETSWITCHED        9

extern GSnmpEnum const isdn_mib_enums_isdnBearerInfoType[];

#define ISDN_MIB_ISDNBEARERMULTIRATE_TRUE  1
#define ISDN_MIB_ISDNBEARERMULTIRATE_FALSE 2

extern GSnmpEnum const isdn_mib_enums_isdnBearerMultirate[];


/*
 * C type definitions for ISDN-MIB::isdnBasicRateEntry.
 */

#define ISDN_MIB_ISDNBASICRATEIFTYPE       (1 << 0) 
#define ISDN_MIB_ISDNBASICRATELINETOPOLOGY (1 << 1) 
#define ISDN_MIB_ISDNBASICRATEIFMODE       (1 << 2) 
#define ISDN_MIB_ISDNBASICRATESIGNALMODE   (1 << 3) 

typedef struct {
    gint32   ifIndex;
    gint32   *isdnBasicRateIfType;
    gint32   *isdnBasicRateLineTopology;
    gint32   *isdnBasicRateIfMode;
    gint32   *isdnBasicRateSignalMode;
} isdn_mib_isdnBasicRateEntry_t;

extern void
isdn_mib_get_isdnBasicRateTable(GSnmpSession *s, isdn_mib_isdnBasicRateEntry_t ***isdnBasicRateEntry, gint mask);

extern void
isdn_mib_free_isdnBasicRateTable(isdn_mib_isdnBasicRateEntry_t **isdnBasicRateEntry);

extern isdn_mib_isdnBasicRateEntry_t *
isdn_mib_new_isdnBasicRateEntry(void);

extern void
isdn_mib_get_isdnBasicRateEntry(GSnmpSession *s, isdn_mib_isdnBasicRateEntry_t **isdnBasicRateEntry, gint32 ifIndex, gint mask);

extern void
isdn_mib_set_isdnBasicRateEntry(GSnmpSession *s, isdn_mib_isdnBasicRateEntry_t *isdnBasicRateEntry, gint mask);

extern void
isdn_mib_free_isdnBasicRateEntry(isdn_mib_isdnBasicRateEntry_t *isdnBasicRateEntry);

extern void
isdn_mib_set_isdnBasicRateIfType(GSnmpSession *s, gint32 ifIndex, gint32 isdnBasicRateIfType);

extern void
isdn_mib_set_isdnBasicRateLineTopology(GSnmpSession *s, gint32 ifIndex, gint32 isdnBasicRateLineTopology);

extern void
isdn_mib_set_isdnBasicRateIfMode(GSnmpSession *s, gint32 ifIndex, gint32 isdnBasicRateIfMode);

extern void
isdn_mib_set_isdnBasicRateSignalMode(GSnmpSession *s, gint32 ifIndex, gint32 isdnBasicRateSignalMode);

/*
 * C type definitions for ISDN-MIB::isdnBearerEntry.
 */

#define ISDN_MIB_ISDNBEARERCHANNELTYPE     (1 << 0) 
#define ISDN_MIB_ISDNBEAREROPERSTATUS      (1 << 1) 
#define ISDN_MIB_ISDNBEARERCHANNELNUMBER   (1 << 2) 
#define ISDN_MIB_ISDNBEARERPEERADDRESS     (1 << 3) 
#define ISDN_MIB_ISDNBEARERPEERSUBADDRESS  (1 << 4) 
#define ISDN_MIB_ISDNBEARERCALLORIGIN      (1 << 5) 
#define ISDN_MIB_ISDNBEARERINFOTYPE        (1 << 6) 
#define ISDN_MIB_ISDNBEARERMULTIRATE       (1 << 7) 
#define ISDN_MIB_ISDNBEARERCALLSETUPTIME   (1 << 8) 
#define ISDN_MIB_ISDNBEARERCALLCONNECTTIME (1 << 9) 
#define ISDN_MIB_ISDNBEARERCHARGEDUNITS    (1 << 10) 

typedef struct {
    gint32   ifIndex;
    gint32   *isdnBearerChannelType;
    gint32   *isdnBearerOperStatus;
    gint32   *isdnBearerChannelNumber;
    guchar   *isdnBearerPeerAddress;
#define ISDN_MIB_ISDNBEARERPEERADDRESSMINLENGTH 0
#define ISDN_MIB_ISDNBEARERPEERADDRESSMAXLENGTH 255
    guint16  _isdnBearerPeerAddressLength;
    guchar   *isdnBearerPeerSubAddress;
#define ISDN_MIB_ISDNBEARERPEERSUBADDRESSMINLENGTH 0
#define ISDN_MIB_ISDNBEARERPEERSUBADDRESSMAXLENGTH 255
    guint16  _isdnBearerPeerSubAddressLength;
    gint32   *isdnBearerCallOrigin;
    gint32   *isdnBearerInfoType;
    gint32   *isdnBearerMultirate;
    guint32  *isdnBearerCallSetupTime;
    guint32  *isdnBearerCallConnectTime;
    guint32  *isdnBearerChargedUnits;
} isdn_mib_isdnBearerEntry_t;

extern void
isdn_mib_get_isdnBearerTable(GSnmpSession *s, isdn_mib_isdnBearerEntry_t ***isdnBearerEntry, gint mask);

extern void
isdn_mib_free_isdnBearerTable(isdn_mib_isdnBearerEntry_t **isdnBearerEntry);

extern isdn_mib_isdnBearerEntry_t *
isdn_mib_new_isdnBearerEntry(void);

extern void
isdn_mib_get_isdnBearerEntry(GSnmpSession *s, isdn_mib_isdnBearerEntry_t **isdnBearerEntry, gint32 ifIndex, gint mask);

extern void
isdn_mib_set_isdnBearerEntry(GSnmpSession *s, isdn_mib_isdnBearerEntry_t *isdnBearerEntry, gint mask);

extern void
isdn_mib_free_isdnBearerEntry(isdn_mib_isdnBearerEntry_t *isdnBearerEntry);

extern void
isdn_mib_set_isdnBearerChannelType(GSnmpSession *s, gint32 ifIndex, gint32 isdnBearerChannelType);


#endif /* _ISDN_MIB_H_ */
