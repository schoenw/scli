/*							-- DO NOT EDIT --
 * This file has been generated by smidump
 * version 0.2.17 for the scli package.
 *
 * Derived from ENTITY-MIB:
 *   The MIB module for representing multiple logical
 *   entities supported by a single SNMP agent.
 *
 * Revision 1999-12-07 00:00:
 *   Initial Version of Entity MIB (Version 2).
 *   This revision obsoletes RFC 2037.
 *   This version published as RFC 2737.
 *
 * Revision 1996-10-31 00:00:
 *   Initial version (version 1), published as
 *   RFC 2037.
 *
 * $Id$
 */

#ifndef _ENTITY_MIB_H_
#define _ENTITY_MIB_H_

#include "g_snmp.h"

/*
 * Tables to map enumerations to strings and vice versa.
 */

#define ENTITY_MIB_ENTPHYSICALCLASS_OTHER	1
#define ENTITY_MIB_ENTPHYSICALCLASS_UNKNOWN	2
#define ENTITY_MIB_ENTPHYSICALCLASS_CHASSIS	3
#define ENTITY_MIB_ENTPHYSICALCLASS_BACKPLANE	4
#define ENTITY_MIB_ENTPHYSICALCLASS_CONTAINER	5
#define ENTITY_MIB_ENTPHYSICALCLASS_POWERSUPPLY	6
#define ENTITY_MIB_ENTPHYSICALCLASS_FAN	7
#define ENTITY_MIB_ENTPHYSICALCLASS_SENSOR	8
#define ENTITY_MIB_ENTPHYSICALCLASS_MODULE	9
#define ENTITY_MIB_ENTPHYSICALCLASS_PORT	10
#define ENTITY_MIB_ENTPHYSICALCLASS_STACK	11

extern GSnmpEnum const entity_mib_enums_entPhysicalClass[];

#define ENTITY_MIB_ENTPHYSICALISFRU_TRUE	1
#define ENTITY_MIB_ENTPHYSICALISFRU_FALSE	2

extern GSnmpEnum const entity_mib_enums_entPhysicalIsFRU[];


/*
 * C type definitions for ENTITY-MIB::entPhysicalEntry.
 */

#define ENTITY_MIB_ENTPHYSICALDESCR	0x1 
#define ENTITY_MIB_ENTPHYSICALVENDORTYPE	0x2 
#define ENTITY_MIB_ENTPHYSICALCONTAINEDIN	0x4 
#define ENTITY_MIB_ENTPHYSICALCLASS	0x8 
#define ENTITY_MIB_ENTPHYSICALPARENTRELPOS	0x10 
#define ENTITY_MIB_ENTPHYSICALNAME	0x20 
#define ENTITY_MIB_ENTPHYSICALHARDWAREREV	0x40 
#define ENTITY_MIB_ENTPHYSICALFIRMWAREREV	0x80 
#define ENTITY_MIB_ENTPHYSICALSOFTWAREREV	0x100 
#define ENTITY_MIB_ENTPHYSICALSERIALNUM	0x200 
#define ENTITY_MIB_ENTPHYSICALMFGNAME	0x400 
#define ENTITY_MIB_ENTPHYSICALMODELNAME	0x800 
#define ENTITY_MIB_ENTPHYSICALALIAS	0x1000 
#define ENTITY_MIB_ENTPHYSICALASSETID	0x2000 
#define ENTITY_MIB_ENTPHYSICALISFRU	0x4000 

typedef struct {
    gint32   entPhysicalIndex;
    guchar   *entPhysicalDescr;
    gsize    _entPhysicalDescrLength;
    guint32  *entPhysicalVendorType;
    gsize    _entPhysicalVendorTypeLength;
    gint32   *entPhysicalContainedIn;
    gint32   *entPhysicalClass;
    gint32   *entPhysicalParentRelPos;
    guchar   *entPhysicalName;
    gsize    _entPhysicalNameLength;
    guchar   *entPhysicalHardwareRev;
    gsize    _entPhysicalHardwareRevLength;
    guchar   *entPhysicalFirmwareRev;
    gsize    _entPhysicalFirmwareRevLength;
    guchar   *entPhysicalSoftwareRev;
    gsize    _entPhysicalSoftwareRevLength;
    guchar   *entPhysicalSerialNum;
    gsize    _entPhysicalSerialNumLength;
    guchar   *entPhysicalMfgName;
    gsize    _entPhysicalMfgNameLength;
    guchar   *entPhysicalModelName;
    gsize    _entPhysicalModelNameLength;
    guchar   *entPhysicalAlias;
    gsize    _entPhysicalAliasLength;
    guchar   *entPhysicalAssetID;
    gsize    _entPhysicalAssetIDLength;
    gint32   *entPhysicalIsFRU;
} entity_mib_entPhysicalEntry_t;

extern void
entity_mib_get_entPhysicalTable(GSnmpSession *s, entity_mib_entPhysicalEntry_t ***entPhysicalEntry, gint mask);

extern void
entity_mib_free_entPhysicalTable(entity_mib_entPhysicalEntry_t **entPhysicalEntry);

extern entity_mib_entPhysicalEntry_t *
entity_mib_new_entPhysicalEntry(void);

extern void
entity_mib_get_entPhysicalEntry(GSnmpSession *s, entity_mib_entPhysicalEntry_t **entPhysicalEntry, gint32 entPhysicalIndex, gint mask);

extern void
entity_mib_set_entPhysicalEntry(GSnmpSession *s, entity_mib_entPhysicalEntry_t *entPhysicalEntry, gint mask);

extern void
entity_mib_free_entPhysicalEntry(entity_mib_entPhysicalEntry_t *entPhysicalEntry);

/*
 * C type definitions for ENTITY-MIB::entLogicalEntry.
 */

#define ENTITY_MIB_ENTLOGICALDESCR	0x1 
#define ENTITY_MIB_ENTLOGICALTYPE	0x2 
#define ENTITY_MIB_ENTLOGICALCOMMUNITY	0x4 
#define ENTITY_MIB_ENTLOGICALTADDRESS	0x8 
#define ENTITY_MIB_ENTLOGICALTDOMAIN	0x10 
#define ENTITY_MIB_ENTLOGICALCONTEXTENGINEID	0x20 
#define ENTITY_MIB_ENTLOGICALCONTEXTNAME	0x40 

typedef struct {
    gint32   entLogicalIndex;
    guchar   *entLogicalDescr;
    gsize    _entLogicalDescrLength;
    guint32  *entLogicalType;
    gsize    _entLogicalTypeLength;
    guchar   *entLogicalCommunity;
    gsize    _entLogicalCommunityLength;
    guchar   *entLogicalTAddress;
    gsize    _entLogicalTAddressLength;
    guint32  *entLogicalTDomain;
    gsize    _entLogicalTDomainLength;
    guchar   *entLogicalContextEngineID;
    gsize    _entLogicalContextEngineIDLength;
    guchar   *entLogicalContextName;
    gsize    _entLogicalContextNameLength;
} entity_mib_entLogicalEntry_t;

extern void
entity_mib_get_entLogicalTable(GSnmpSession *s, entity_mib_entLogicalEntry_t ***entLogicalEntry, gint mask);

extern void
entity_mib_free_entLogicalTable(entity_mib_entLogicalEntry_t **entLogicalEntry);

extern entity_mib_entLogicalEntry_t *
entity_mib_new_entLogicalEntry(void);

extern void
entity_mib_get_entLogicalEntry(GSnmpSession *s, entity_mib_entLogicalEntry_t **entLogicalEntry, gint32 entLogicalIndex, gint mask);

extern void
entity_mib_free_entLogicalEntry(entity_mib_entLogicalEntry_t *entLogicalEntry);

/*
 * C type definitions for ENTITY-MIB::entLPMappingEntry.
 */

#define ENTITY_MIB_ENTLPPHYSICALINDEX	0x1 

typedef struct {
    gint32   entLogicalIndex;
    gint32   entLPPhysicalIndex;
} entity_mib_entLPMappingEntry_t;

extern void
entity_mib_get_entLPMappingTable(GSnmpSession *s, entity_mib_entLPMappingEntry_t ***entLPMappingEntry, gint mask);

extern void
entity_mib_free_entLPMappingTable(entity_mib_entLPMappingEntry_t **entLPMappingEntry);

extern entity_mib_entLPMappingEntry_t *
entity_mib_new_entLPMappingEntry(void);

extern void
entity_mib_get_entLPMappingEntry(GSnmpSession *s, entity_mib_entLPMappingEntry_t **entLPMappingEntry, gint32 entLogicalIndex, gint32 entLPPhysicalIndex, gint mask);

extern void
entity_mib_free_entLPMappingEntry(entity_mib_entLPMappingEntry_t *entLPMappingEntry);

/*
 * C type definitions for ENTITY-MIB::entAliasMappingEntry.
 */

#define ENTITY_MIB_ENTALIASMAPPINGIDENTIFIER	0x1 

typedef struct {
    gint32   entPhysicalIndex;
    gint32   entAliasLogicalIndexOrZero;
    guint32  *entAliasMappingIdentifier;
    gsize    _entAliasMappingIdentifierLength;
} entity_mib_entAliasMappingEntry_t;

extern void
entity_mib_get_entAliasMappingTable(GSnmpSession *s, entity_mib_entAliasMappingEntry_t ***entAliasMappingEntry, gint mask);

extern void
entity_mib_free_entAliasMappingTable(entity_mib_entAliasMappingEntry_t **entAliasMappingEntry);

extern entity_mib_entAliasMappingEntry_t *
entity_mib_new_entAliasMappingEntry(void);

extern void
entity_mib_get_entAliasMappingEntry(GSnmpSession *s, entity_mib_entAliasMappingEntry_t **entAliasMappingEntry, gint32 entPhysicalIndex, gint32 entAliasLogicalIndexOrZero, gint mask);

extern void
entity_mib_free_entAliasMappingEntry(entity_mib_entAliasMappingEntry_t *entAliasMappingEntry);

/*
 * C type definitions for ENTITY-MIB::entPhysicalContainsEntry.
 */

#define ENTITY_MIB_ENTPHYSICALCHILDINDEX	0x1 

typedef struct {
    gint32   entPhysicalIndex;
    gint32   entPhysicalChildIndex;
} entity_mib_entPhysicalContainsEntry_t;

extern void
entity_mib_get_entPhysicalContainsTable(GSnmpSession *s, entity_mib_entPhysicalContainsEntry_t ***entPhysicalContainsEntry, gint mask);

extern void
entity_mib_free_entPhysicalContainsTable(entity_mib_entPhysicalContainsEntry_t **entPhysicalContainsEntry);

extern entity_mib_entPhysicalContainsEntry_t *
entity_mib_new_entPhysicalContainsEntry(void);

extern void
entity_mib_get_entPhysicalContainsEntry(GSnmpSession *s, entity_mib_entPhysicalContainsEntry_t **entPhysicalContainsEntry, gint32 entPhysicalIndex, gint32 entPhysicalChildIndex, gint mask);

extern void
entity_mib_free_entPhysicalContainsEntry(entity_mib_entPhysicalContainsEntry_t *entPhysicalContainsEntry);

/*
 * C type definitions for ENTITY-MIB::entityGeneral.
 */

#define ENTITY_MIB_ENTLASTCHANGETIME	0x1 

typedef struct {
    guint32  *entLastChangeTime;
} entity_mib_entityGeneral_t;

extern entity_mib_entityGeneral_t *
entity_mib_new_entityGeneral(void);

extern void
entity_mib_get_entityGeneral(GSnmpSession *s, entity_mib_entityGeneral_t **entityGeneral, gint mask);

extern void
entity_mib_free_entityGeneral(entity_mib_entityGeneral_t *entityGeneral);


#endif /* _ENTITY_MIB_H_ */
