/*							-- DO NOT EDIT --
 * This file has been generated by smidump
 * version 0.2.14 for the stools package.
 *
 * Derived from ENTITY-MIB:
 *   The MIB module for representing multiple logical
 *   entities supported by a single SNMP agent.
 *
 * Revision 1999-12-07 00:00:
 *   Initial Version of Entity MIB (Version 2).
 *   This revision obsoletes RFC 2037.
 *   This version published as RFC 2737.
 *
 * Revision 1996-10-31 00:00:
 *   Initial version (version 1), published as
 *   RFC 2037.
 *
 * $Id$
 */

#ifndef _ENTITY_MIB_H_
#define _ENTITY_MIB_H_

#include "stools.h"

/*
 * Tables to map enumerations to strings and vice versa.
 */

#define ENTITY_MIB_ENTPHYSICALCLASS_OTHER	1
#define ENTITY_MIB_ENTPHYSICALCLASS_UNKNOWN	2
#define ENTITY_MIB_ENTPHYSICALCLASS_CHASSIS	3
#define ENTITY_MIB_ENTPHYSICALCLASS_BACKPLANE	4
#define ENTITY_MIB_ENTPHYSICALCLASS_CONTAINER	5
#define ENTITY_MIB_ENTPHYSICALCLASS_POWERSUPPLY	6
#define ENTITY_MIB_ENTPHYSICALCLASS_FAN	7
#define ENTITY_MIB_ENTPHYSICALCLASS_SENSOR	8
#define ENTITY_MIB_ENTPHYSICALCLASS_MODULE	9
#define ENTITY_MIB_ENTPHYSICALCLASS_PORT	10
#define ENTITY_MIB_ENTPHYSICALCLASS_STACK	11

extern stls_table_t const entity_mib_enums_entPhysicalClass[];

#define ENTITY_MIB_ENTPHYSICALISFRU_TRUE	1
#define ENTITY_MIB_ENTPHYSICALISFRU_FALSE	2

extern stls_table_t const entity_mib_enums_entPhysicalIsFRU[];


/*
 * C type definitions for ENTITY-MIB::entPhysicalEntry.
 */

typedef struct entPhysicalEntry {
    gint32   entPhysicalIndex;
    guchar   *entPhysicalDescr;
    gsize    _entPhysicalDescrLength;
    guint32  *entPhysicalVendorType;
    gsize    _entPhysicalVendorTypeLength;
    gint32   *entPhysicalContainedIn;
    gint32   *entPhysicalClass;
    gint32   *entPhysicalParentRelPos;
    guchar   *entPhysicalName;
    gsize    _entPhysicalNameLength;
    guchar   *entPhysicalHardwareRev;
    gsize    _entPhysicalHardwareRevLength;
    guchar   *entPhysicalFirmwareRev;
    gsize    _entPhysicalFirmwareRevLength;
    guchar   *entPhysicalSoftwareRev;
    gsize    _entPhysicalSoftwareRevLength;
    guchar   *entPhysicalSerialNum;
    gsize    _entPhysicalSerialNumLength;
    guchar   *entPhysicalMfgName;
    gsize    _entPhysicalMfgNameLength;
    guchar   *entPhysicalModelName;
    gsize    _entPhysicalModelNameLength;
    guchar   *entPhysicalAlias;
    gsize    _entPhysicalAliasLength;
    guchar   *entPhysicalAssetID;
    gsize    _entPhysicalAssetIDLength;
    gint32   *entPhysicalIsFRU;
} entPhysicalEntry_t;

extern int
entity_mib_get_entPhysicalTable(host_snmp *s, entPhysicalEntry_t ***entPhysicalEntry);

extern void
entity_mib_free_entPhysicalTable(entPhysicalEntry_t **entPhysicalEntry);

extern entPhysicalEntry_t *
entity_mib_new_entPhysicalEntry();

extern int
entity_mib_get_entPhysicalEntry(host_snmp *s, entPhysicalEntry_t **entPhysicalEntry);

extern int
entity_mib_set_entPhysicalEntry(host_snmp *s, entPhysicalEntry_t *entPhysicalEntry);

extern void
entity_mib_free_entPhysicalEntry(entPhysicalEntry_t *entPhysicalEntry);

/*
 * C type definitions for ENTITY-MIB::entLogicalEntry.
 */

typedef struct entLogicalEntry {
    gint32   entLogicalIndex;
    guchar   *entLogicalDescr;
    gsize    _entLogicalDescrLength;
    guint32  *entLogicalType;
    gsize    _entLogicalTypeLength;
    guchar   *entLogicalCommunity;
    gsize    _entLogicalCommunityLength;
    guchar   *entLogicalTAddress;
    gsize    _entLogicalTAddressLength;
    guint32  *entLogicalTDomain;
    gsize    _entLogicalTDomainLength;
    guchar   *entLogicalContextEngineID;
    gsize    _entLogicalContextEngineIDLength;
    guchar   *entLogicalContextName;
    gsize    _entLogicalContextNameLength;
} entLogicalEntry_t;

extern int
entity_mib_get_entLogicalTable(host_snmp *s, entLogicalEntry_t ***entLogicalEntry);

extern void
entity_mib_free_entLogicalTable(entLogicalEntry_t **entLogicalEntry);

extern entLogicalEntry_t *
entity_mib_new_entLogicalEntry();

extern int
entity_mib_get_entLogicalEntry(host_snmp *s, entLogicalEntry_t **entLogicalEntry);

extern void
entity_mib_free_entLogicalEntry(entLogicalEntry_t *entLogicalEntry);

/*
 * C type definitions for ENTITY-MIB::entLPMappingEntry.
 */

typedef struct entLPMappingEntry {
    gint32   entLogicalIndex;
    gint32   entLPPhysicalIndex;
} entLPMappingEntry_t;

extern int
entity_mib_get_entLPMappingTable(host_snmp *s, entLPMappingEntry_t ***entLPMappingEntry);

extern void
entity_mib_free_entLPMappingTable(entLPMappingEntry_t **entLPMappingEntry);

extern entLPMappingEntry_t *
entity_mib_new_entLPMappingEntry();

extern int
entity_mib_get_entLPMappingEntry(host_snmp *s, entLPMappingEntry_t **entLPMappingEntry);

extern void
entity_mib_free_entLPMappingEntry(entLPMappingEntry_t *entLPMappingEntry);

/*
 * C type definitions for ENTITY-MIB::entAliasMappingEntry.
 */

typedef struct entAliasMappingEntry {
    gint32   entPhysicalIndex;
    gint32   entAliasLogicalIndexOrZero;
    guint32  *entAliasMappingIdentifier;
    gsize    _entAliasMappingIdentifierLength;
} entAliasMappingEntry_t;

extern int
entity_mib_get_entAliasMappingTable(host_snmp *s, entAliasMappingEntry_t ***entAliasMappingEntry);

extern void
entity_mib_free_entAliasMappingTable(entAliasMappingEntry_t **entAliasMappingEntry);

extern entAliasMappingEntry_t *
entity_mib_new_entAliasMappingEntry();

extern int
entity_mib_get_entAliasMappingEntry(host_snmp *s, entAliasMappingEntry_t **entAliasMappingEntry);

extern void
entity_mib_free_entAliasMappingEntry(entAliasMappingEntry_t *entAliasMappingEntry);

/*
 * C type definitions for ENTITY-MIB::entPhysicalContainsEntry.
 */

typedef struct entPhysicalContainsEntry {
    gint32   entPhysicalIndex;
    gint32   entPhysicalChildIndex;
} entPhysicalContainsEntry_t;

extern int
entity_mib_get_entPhysicalContainsTable(host_snmp *s, entPhysicalContainsEntry_t ***entPhysicalContainsEntry);

extern void
entity_mib_free_entPhysicalContainsTable(entPhysicalContainsEntry_t **entPhysicalContainsEntry);

extern entPhysicalContainsEntry_t *
entity_mib_new_entPhysicalContainsEntry();

extern int
entity_mib_get_entPhysicalContainsEntry(host_snmp *s, entPhysicalContainsEntry_t **entPhysicalContainsEntry);

extern void
entity_mib_free_entPhysicalContainsEntry(entPhysicalContainsEntry_t *entPhysicalContainsEntry);

/*
 * C type definitions for ENTITY-MIB::entityGeneral.
 */

typedef struct entityGeneral {
    guint32  *entLastChangeTime;
} entityGeneral_t;

extern entityGeneral_t *
entity_mib_new_entityGeneral();

extern int
entity_mib_get_entityGeneral(host_snmp *s, entityGeneral_t **entityGeneral);

extern void
entity_mib_free_entityGeneral(entityGeneral_t *entityGeneral);


#endif /* _ENTITY_MIB_H_ */
