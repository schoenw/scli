/*							-- DO NOT EDIT --
 * Generated by smidump version 0.4.3-pre1:
 *   smidump -f scli \
 *     --scli-include='dot3StatsEntry' EtherLike-MIB
 *
 * Derived from EtherLike-MIB:
 *   The MIB module to describe generic objects for
 *   ethernet-like network interfaces.
 *   
 *   The following reference is used throughout this
 *   MIB module:
 *   
 *   [IEEE 802.3 Std] refers to:
 *      IEEE Std 802.3, 2002 Edition: 'IEEE Standard
 *   
 *   
 *   
 *      for Information technology -
 *      Telecommunications and information exchange
 *      between systems - Local and metropolitan
 *      area networks - Specific requirements -
 *      Part 3: Carrier sense multiple access with
 *      collision detection (CSMA/CD) access method
 *      and physical layer specifications', as
 *      amended by IEEE Std 802.3ae-2002:
 *      'Amendment: Media Access Control (MAC)
 *      Parameters, Physical Layer, and Management
 *      Parameters for 10 Gb/s Operation', August,
 *      2002.
 *   
 *   Of particular interest is Clause 30, '10 Mb/s,
 *   100 Mb/s, 1000 Mb/s, and 10 Gb/s Management'.
 *   
 *   Copyright (C) The Internet Society (2003).  This
 *   version of this MIB module is part of RFC 3635;
 *   see the RFC itself for full legal notices.
 *
 * Revision 2003-09-19 00:00:
 *   Updated to include support for 10 Gb/sec
 *   interfaces.  This resulted in the following
 *   revisions:
 *   
 *   - Updated dot3StatsAlignmentErrors and
 *     dot3StatsSymbolErrors DESCRIPTIONs to
 *     reflect behaviour at 10 Gb/s
 *   - Added dot3StatsRateControlAbility and
 *     dot3RateControlStatus for management
 *     of the Rate Control function in 10 Gb/s
 *     WAN applications
 *   - Added 64-bit versions of all counters
 *     that are used on high-speed ethernet
 *     interfaces
 *   - Added object groups to contain the new
 *     objects
 *   - Deprecated etherStatsBaseGroup and
 *     split into etherStatsBaseGroup2 and
 *     etherStatsHalfDuplexGroup, so that
 *     interfaces which can only operate at
 *     full-duplex do not need to implement
 *     half-duplex-only statistics
 *   - Deprecated dot3Compliance and replaced
 *     it with dot3Compliance2, which includes
 *     the compliance information for the new
 *     object groups
 *   
 *   
 *   
 *   
 *   In addition, the dot3Tests and dot3Errors
 *   object identities have been deprecated,
 *   since there is no longer a standard method
 *   for using them.
 *   
 *   This version published as RFC 3635.
 *
 * Revision 1999-08-24 04:00:
 *   Updated to include support for 1000 Mb/sec
 *   interfaces and full-duplex interfaces.
 *   This version published as RFC 2665.
 *
 * Revision 1998-06-03 21:50:
 *   Updated to include support for 100 Mb/sec
 *   interfaces.
 *   This version published as RFC 2358.
 *
 * Revision 1994-02-03 04:00:
 *   Initial version, published as RFC 1650.
 *
 * $Id$
 */

#ifndef _ETHERLIKE_MIB_H_
#define _ETHERLIKE_MIB_H_

#include "gsnmp.h"

G_BEGIN_DECLS

/*
 * Tables to map enumerations to strings and vice versa.
 */

#define ETHERLIKE_MIB_DOT3STATSDUPLEXSTATUS_UNKNOWN    1
#define ETHERLIKE_MIB_DOT3STATSDUPLEXSTATUS_HALFDUPLEX 2
#define ETHERLIKE_MIB_DOT3STATSDUPLEXSTATUS_FULLDUPLEX 3

extern GNetSnmpEnum const etherlike_mib_enums_dot3StatsDuplexStatus[];

#define ETHERLIKE_MIB_DOT3STATSRATECONTROLSTATUS_RATECONTROLOFF 1
#define ETHERLIKE_MIB_DOT3STATSRATECONTROLSTATUS_RATECONTROLON  2
#define ETHERLIKE_MIB_DOT3STATSRATECONTROLSTATUS_UNKNOWN        3

extern GNetSnmpEnum const etherlike_mib_enums_dot3StatsRateControlStatus[];


/*
 * C type definitions for EtherLike-MIB::dot3StatsEntry.
 */

#define ETHERLIKE_MIB_DOT3STATSINDEX                     (1 << 0) 
#define ETHERLIKE_MIB_DOT3STATSALIGNMENTERRORS           (1 << 1) 
#define ETHERLIKE_MIB_DOT3STATSFCSERRORS                 (1 << 2) 
#define ETHERLIKE_MIB_DOT3STATSSINGLECOLLISIONFRAMES     (1 << 3) 
#define ETHERLIKE_MIB_DOT3STATSMULTIPLECOLLISIONFRAMES   (1 << 4) 
#define ETHERLIKE_MIB_DOT3STATSSQETESTERRORS             (1 << 5) 
#define ETHERLIKE_MIB_DOT3STATSDEFERREDTRANSMISSIONS     (1 << 6) 
#define ETHERLIKE_MIB_DOT3STATSLATECOLLISIONS            (1 << 7) 
#define ETHERLIKE_MIB_DOT3STATSEXCESSIVECOLLISIONS       (1 << 8) 
#define ETHERLIKE_MIB_DOT3STATSINTERNALMACTRANSMITERRORS (1 << 9) 
#define ETHERLIKE_MIB_DOT3STATSCARRIERSENSEERRORS        (1 << 10) 
#define ETHERLIKE_MIB_DOT3STATSFRAMETOOLONGS             (1 << 11) 
#define ETHERLIKE_MIB_DOT3STATSINTERNALMACRECEIVEERRORS  (1 << 12) 
#define ETHERLIKE_MIB_DOT3STATSETHERCHIPSET              (1 << 13) 
#define ETHERLIKE_MIB_DOT3STATSSYMBOLERRORS              (1 << 14) 
#define ETHERLIKE_MIB_DOT3STATSDUPLEXSTATUS              (1 << 15) 
#define ETHERLIKE_MIB_DOT3STATSRATECONTROLABILITY        (1 << 16) 
#define ETHERLIKE_MIB_DOT3STATSRATECONTROLSTATUS         (1 << 17) 

typedef struct {
    gint32   dot3StatsIndex;                          /* ro IF-MIB::InterfaceIndex */
    guint32  *dot3StatsAlignmentErrors;               /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsFCSErrors;                     /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsSingleCollisionFrames;         /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsMultipleCollisionFrames;       /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsSQETestErrors;                 /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsDeferredTransmissions;         /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsLateCollisions;                /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsExcessiveCollisions;           /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsInternalMacTransmitErrors;     /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsCarrierSenseErrors;            /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsFrameTooLongs;                 /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsInternalMacReceiveErrors;      /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsEtherChipSet;                  /* ro ObjectIdentifier */
#define ETHERLIKE_MIB_DOT3STATSETHERCHIPSETMINLENGTH 0
#define ETHERLIKE_MIB_DOT3STATSETHERCHIPSETMAXLENGTH 128
    guint16  _dot3StatsEtherChipSetLength;
    guint32  *dot3StatsSymbolErrors;                  /* ro SNMPv2-SMI::Counter32 */
    gint32   *dot3StatsDuplexStatus;                  /* ro */
    gint32   *dot3StatsRateControlAbility;            /* ro SNMPv2-TC::TruthValue */
    gint32   *dot3StatsRateControlStatus;             /* ro */
} etherlike_mib_dot3StatsEntry_t;

extern void
etherlike_mib_get_dot3StatsTable(GNetSnmp *s, etherlike_mib_dot3StatsEntry_t ***dot3StatsEntry, gint64 mask);

extern void
etherlike_mib_free_dot3StatsTable(etherlike_mib_dot3StatsEntry_t **dot3StatsEntry);

extern etherlike_mib_dot3StatsEntry_t *
etherlike_mib_new_dot3StatsEntry(void);

extern void
etherlike_mib_get_dot3StatsEntry(GNetSnmp *s, etherlike_mib_dot3StatsEntry_t **dot3StatsEntry, gint32 dot3StatsIndex, gint64 mask);

extern void
etherlike_mib_free_dot3StatsEntry(etherlike_mib_dot3StatsEntry_t *dot3StatsEntry);


G_END_DECLS

#endif /* _ETHERLIKE_MIB_H_ */
