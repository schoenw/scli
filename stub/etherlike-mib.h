/*							-- DO NOT EDIT --
 * This file has been generated by smidump
 * version 0.4.2-pre1 for the scli package.
 *
 * Options:
 *   --scli-include='dot3StatsEntry'
 *
 * Derived from EtherLike-MIB:
 *   The MIB module to describe generic objects for
 *   
 *   Ethernet-like network interfaces.
 *   
 *   The following reference is used throughout this
 *   MIB module:
 *   
 *   [IEEE 802.3 Std] refers to:
 *      IEEE Std 802.3, 1998 Edition: 'Information
 *      technology - Telecommunications and
 *      information exchange between systems -
 *      Local and metropolitan area networks -
 *      Specific requirements - Part 3: Carrier
 *      sense multiple access with collision
 *      detection (CSMA/CD) access method and
 *      physical layer specifications',
 *      September 1998.
 *   
 *   Of particular interest is Clause 30, '10Mb/s,
 *   100Mb/s and 1000Mb/s Management'.
 *
 * Revision 1999-08-24 04:00:
 *   Updated to include support for 1000 Mb/sec
 *   interfaces and full-duplex interfaces.
 *   This version published as RFC 2665.
 *
 * Revision 1998-06-03 21:50:
 *   Updated to include support for 100 Mb/sec
 *   interfaces.
 *   This version published as RFC 2358.
 *
 * Revision 1994-02-03 04:00:
 *   Initial version, published as RFC 1650.
 *
 * $Id$
 */

#ifndef _ETHERLIKE_MIB_H_
#define _ETHERLIKE_MIB_H_

#include "gsnmp.h"

G_BEGIN_DECLS

/*
 * Tables to map enumerations to strings and vice versa.
 */

#define ETHERLIKE_MIB_DOT3STATSDUPLEXSTATUS_UNKNOWN    1
#define ETHERLIKE_MIB_DOT3STATSDUPLEXSTATUS_HALFDUPLEX 2
#define ETHERLIKE_MIB_DOT3STATSDUPLEXSTATUS_FULLDUPLEX 3

extern GSnmpEnum const etherlike_mib_enums_dot3StatsDuplexStatus[];


/*
 * C type definitions for EtherLike-MIB::dot3StatsEntry.
 */

#define ETHERLIKE_MIB_DOT3STATSINDEX                     (1 << 0) 
#define ETHERLIKE_MIB_DOT3STATSALIGNMENTERRORS           (1 << 1) 
#define ETHERLIKE_MIB_DOT3STATSFCSERRORS                 (1 << 2) 
#define ETHERLIKE_MIB_DOT3STATSSINGLECOLLISIONFRAMES     (1 << 3) 
#define ETHERLIKE_MIB_DOT3STATSMULTIPLECOLLISIONFRAMES   (1 << 4) 
#define ETHERLIKE_MIB_DOT3STATSSQETESTERRORS             (1 << 5) 
#define ETHERLIKE_MIB_DOT3STATSDEFERREDTRANSMISSIONS     (1 << 6) 
#define ETHERLIKE_MIB_DOT3STATSLATECOLLISIONS            (1 << 7) 
#define ETHERLIKE_MIB_DOT3STATSEXCESSIVECOLLISIONS       (1 << 8) 
#define ETHERLIKE_MIB_DOT3STATSINTERNALMACTRANSMITERRORS (1 << 9) 
#define ETHERLIKE_MIB_DOT3STATSCARRIERSENSEERRORS        (1 << 10) 
#define ETHERLIKE_MIB_DOT3STATSFRAMETOOLONGS             (1 << 11) 
#define ETHERLIKE_MIB_DOT3STATSINTERNALMACRECEIVEERRORS  (1 << 12) 
#define ETHERLIKE_MIB_DOT3STATSETHERCHIPSET              (1 << 13) 
#define ETHERLIKE_MIB_DOT3STATSSYMBOLERRORS              (1 << 14) 
#define ETHERLIKE_MIB_DOT3STATSDUPLEXSTATUS              (1 << 15) 

typedef struct {
    gint32   dot3StatsIndex;                          /* ro IF-MIB::InterfaceIndex */
    guint32  *dot3StatsAlignmentErrors;               /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsFCSErrors;                     /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsSingleCollisionFrames;         /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsMultipleCollisionFrames;       /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsSQETestErrors;                 /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsDeferredTransmissions;         /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsLateCollisions;                /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsExcessiveCollisions;           /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsInternalMacTransmitErrors;     /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsCarrierSenseErrors;            /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsFrameTooLongs;                 /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsInternalMacReceiveErrors;      /* ro SNMPv2-SMI::Counter32 */
    guint32  *dot3StatsEtherChipSet;                  /* ro ObjectIdentifier */
#define ETHERLIKE_MIB_DOT3STATSETHERCHIPSETMINLENGTH 0
#define ETHERLIKE_MIB_DOT3STATSETHERCHIPSETMAXLENGTH 128
    guint16  _dot3StatsEtherChipSetLength;
    guint32  *dot3StatsSymbolErrors;                  /* ro SNMPv2-SMI::Counter32 */
    gint32   *dot3StatsDuplexStatus;                  /* ro */
} etherlike_mib_dot3StatsEntry_t;

extern void
etherlike_mib_get_dot3StatsTable(GSnmpSession *s, etherlike_mib_dot3StatsEntry_t ***dot3StatsEntry, gint64 mask);

extern void
etherlike_mib_free_dot3StatsTable(etherlike_mib_dot3StatsEntry_t **dot3StatsEntry);

extern etherlike_mib_dot3StatsEntry_t *
etherlike_mib_new_dot3StatsEntry(void);

extern void
etherlike_mib_get_dot3StatsEntry(GSnmpSession *s, etherlike_mib_dot3StatsEntry_t **dot3StatsEntry, gint32 dot3StatsIndex, gint64 mask);

extern void
etherlike_mib_free_dot3StatsEntry(etherlike_mib_dot3StatsEntry_t *dot3StatsEntry);


G_END_DECLS

#endif /* _ETHERLIKE_MIB_H_ */
