/*							-- DO NOT EDIT --
 * This file has been generated by smidump
 * version 0.2.14 for the stools package.
 *
 * Derived from ATM-MIB:
 *   This is the MIB Module for ATM and AAL5-related
 *   objects for managing ATM interfaces, ATM virtual
 *   links, ATM cross-connects, AAL5 entities, and
 *   and AAL5 connections.
 *
 * Revision 1998-10-19 12:00:
 *   The initial revision of this module was published
 *   as RFC 1695. Key revisions include:
 *   o  Textual Conventions and OBJECT IDENTITIES have
 *      been moved to a separate MIB module.
 *   o  Applicability of objects to PVCs, SVCs and Soft
 *      PVCs has been clarified.
 *   o  DEFVAL clauses have been added.
 *   o  The relationship of ifIndex values with different
 *      layers and sublayers related to ATM has been
 *      clarified.
 *   o  atmTrafficQosClass has been deprecated
 *      and replaced with atmServiceCategory.
 *   o  atmInterfaceCurrentMaxVpiBits and
 *      atmInterfaceCurrentMaxVciBits have been added with
 *      a description on their relationship with other
 *      objects.
 *   o  atmInterfaceAddressType and atmInterfaceAdminAddress
 *      have been deprecated and replaced by
 *      atmInterfaceSubscrAddress.
 *   o  atmInterfaceTCAlarmState has been clarified.
 *   o  atmTrafficDescrParamIndexNext has been introduced
 *      in order to provide a manager a free
 *      atmTrafficDescrParamIndex value.
 *   o  The atmTrafficFrameDiscard capability has been added.
 *   o  A connection topology type (atmVpl/VclCastType) and
 *      a call control type (atmVpl/VclConnKind) have been
 *      added.
 *   o  aal2 has been added to atmVccAalType.
 *
 * Revision 1994-06-07 22:45:
 *   The RFC1695 version of this MIB module.
 *
 * $Id$
 */

#ifndef _ATM_MIB_H_
#define _ATM_MIB_H_

#include "stools.h"

/*
 * Tables to map enumerations to strings and vice versa.
 */

extern stls_table_t const atm_mib_enums_atmInterfaceAddressType[];
extern stls_table_t const atm_mib_enums_atmInterfaceDs3PlcpAlarmState[];
extern stls_table_t const atm_mib_enums_atmInterfaceTCAlarmState[];
extern stls_table_t const atm_mib_enums_atmTrafficDescrRowStatus[];
extern stls_table_t const atm_mib_enums_atmServiceCategory[];
extern stls_table_t const atm_mib_enums_atmTrafficFrameDiscard[];
extern stls_table_t const atm_mib_enums_atmVplAdminStatus[];
extern stls_table_t const atm_mib_enums_atmVplOperStatus[];
extern stls_table_t const atm_mib_enums_atmVplRowStatus[];
extern stls_table_t const atm_mib_enums_atmVplCastType[];
extern stls_table_t const atm_mib_enums_atmVplConnKind[];
extern stls_table_t const atm_mib_enums_atmVclAdminStatus[];
extern stls_table_t const atm_mib_enums_atmVclOperStatus[];
extern stls_table_t const atm_mib_enums_atmVccAalType[];
extern stls_table_t const atm_mib_enums_atmVccAal5EncapsType[];
extern stls_table_t const atm_mib_enums_atmVclRowStatus[];
extern stls_table_t const atm_mib_enums_atmVclCastType[];
extern stls_table_t const atm_mib_enums_atmVclConnKind[];
extern stls_table_t const atm_mib_enums_atmVpCrossConnectAdminStatus[];
extern stls_table_t const atm_mib_enums_atmVpCrossConnectL2HOperStatus[];
extern stls_table_t const atm_mib_enums_atmVpCrossConnectH2LOperStatus[];
extern stls_table_t const atm_mib_enums_atmVpCrossConnectRowStatus[];
extern stls_table_t const atm_mib_enums_atmVcCrossConnectAdminStatus[];
extern stls_table_t const atm_mib_enums_atmVcCrossConnectL2HOperStatus[];
extern stls_table_t const atm_mib_enums_atmVcCrossConnectH2LOperStatus[];
extern stls_table_t const atm_mib_enums_atmVcCrossConnectRowStatus[];

/*
 * C type definitions for ATM-MIB::atmMIBObjects.
 */

typedef struct atmMIBObjects {
    gint32   *atmVpCrossConnectIndexNext;
    gint32   *atmVcCrossConnectIndexNext;
    gint32   *atmTrafficDescrParamIndexNext;
} atmMIBObjects_t;

extern atmMIBObjects_t *
atm_mib_new_atmMIBObjects();

extern int
atm_mib_get_atmMIBObjects(host_snmp *s, atmMIBObjects_t **atmMIBObjects);

extern void
atm_mib_free_atmMIBObjects(atmMIBObjects_t *atmMIBObjects);

/*
 * C type definitions for ATM-MIB::atmInterfaceConfEntry.
 */

typedef struct atmInterfaceConfEntry {
    gint32   ifIndex;
    gint32   *atmInterfaceMaxVpcs;
    gint32   *atmInterfaceMaxVccs;
    gint32   *atmInterfaceConfVpcs;
    gint32   *atmInterfaceConfVccs;
    gint32   *atmInterfaceMaxActiveVpiBits;
    gint32   *atmInterfaceMaxActiveVciBits;
    gint32   *atmInterfaceIlmiVpi;
    gint32   *atmInterfaceIlmiVci;
    gint32   *atmInterfaceAddressType;
    guchar   *atmInterfaceAdminAddress;
    gsize    _atmInterfaceAdminAddressLength;
    guchar   *atmInterfaceMyNeighborIpAddress;
    guchar   *atmInterfaceMyNeighborIfName;
    gsize    _atmInterfaceMyNeighborIfNameLength;
    gint32   *atmInterfaceCurrentMaxVpiBits;
    gint32   *atmInterfaceCurrentMaxVciBits;
    guchar   *atmInterfaceSubscrAddress;
    gsize    _atmInterfaceSubscrAddressLength;
} atmInterfaceConfEntry_t;

extern int
atm_mib_get_atmInterfaceConfTable(host_snmp *s, atmInterfaceConfEntry_t ***atmInterfaceConfEntry);

extern void
atm_mib_free_atmInterfaceConfTable(atmInterfaceConfEntry_t **atmInterfaceConfEntry);

extern atmInterfaceConfEntry_t *
atm_mib_new_atmInterfaceConfEntry();

extern int
atm_mib_get_atmInterfaceConfEntry(host_snmp *s, atmInterfaceConfEntry_t **atmInterfaceConfEntry);

extern int
atm_mib_set_atmInterfaceConfEntry(host_snmp *s, atmInterfaceConfEntry_t *atmInterfaceConfEntry);

extern void
atm_mib_free_atmInterfaceConfEntry(atmInterfaceConfEntry_t *atmInterfaceConfEntry);

/*
 * C type definitions for ATM-MIB::atmInterfaceDs3PlcpEntry.
 */

typedef struct atmInterfaceDs3PlcpEntry {
    gint32   ifIndex;
    guint32  *atmInterfaceDs3PlcpSEFSs;
    gint32   *atmInterfaceDs3PlcpAlarmState;
    guint32  *atmInterfaceDs3PlcpUASs;
} atmInterfaceDs3PlcpEntry_t;

extern int
atm_mib_get_atmInterfaceDs3PlcpTable(host_snmp *s, atmInterfaceDs3PlcpEntry_t ***atmInterfaceDs3PlcpEntry);

extern void
atm_mib_free_atmInterfaceDs3PlcpTable(atmInterfaceDs3PlcpEntry_t **atmInterfaceDs3PlcpEntry);

extern atmInterfaceDs3PlcpEntry_t *
atm_mib_new_atmInterfaceDs3PlcpEntry();

extern int
atm_mib_get_atmInterfaceDs3PlcpEntry(host_snmp *s, atmInterfaceDs3PlcpEntry_t **atmInterfaceDs3PlcpEntry);

extern void
atm_mib_free_atmInterfaceDs3PlcpEntry(atmInterfaceDs3PlcpEntry_t *atmInterfaceDs3PlcpEntry);

/*
 * C type definitions for ATM-MIB::atmInterfaceTCEntry.
 */

typedef struct atmInterfaceTCEntry {
    gint32   ifIndex;
    guint32  *atmInterfaceOCDEvents;
    gint32   *atmInterfaceTCAlarmState;
} atmInterfaceTCEntry_t;

extern int
atm_mib_get_atmInterfaceTCTable(host_snmp *s, atmInterfaceTCEntry_t ***atmInterfaceTCEntry);

extern void
atm_mib_free_atmInterfaceTCTable(atmInterfaceTCEntry_t **atmInterfaceTCEntry);

extern atmInterfaceTCEntry_t *
atm_mib_new_atmInterfaceTCEntry();

extern int
atm_mib_get_atmInterfaceTCEntry(host_snmp *s, atmInterfaceTCEntry_t **atmInterfaceTCEntry);

extern void
atm_mib_free_atmInterfaceTCEntry(atmInterfaceTCEntry_t *atmInterfaceTCEntry);

/*
 * C type definitions for ATM-MIB::atmTrafficDescrParamEntry.
 */

typedef struct atmTrafficDescrParamEntry {
    gint32   atmTrafficDescrParamIndex;
    guint32  *atmTrafficDescrType;
    gsize    _atmTrafficDescrTypeLength;
    gint32   *atmTrafficDescrParam1;
    gint32   *atmTrafficDescrParam2;
    gint32   *atmTrafficDescrParam3;
    gint32   *atmTrafficDescrParam4;
    gint32   *atmTrafficDescrParam5;
    gint32   *atmTrafficQoSClass;
    gint32   *atmTrafficDescrRowStatus;
    gint32   *atmServiceCategory;
    gint32   *atmTrafficFrameDiscard;
} atmTrafficDescrParamEntry_t;

extern int
atm_mib_get_atmTrafficDescrParamTable(host_snmp *s, atmTrafficDescrParamEntry_t ***atmTrafficDescrParamEntry);

extern void
atm_mib_free_atmTrafficDescrParamTable(atmTrafficDescrParamEntry_t **atmTrafficDescrParamEntry);

extern atmTrafficDescrParamEntry_t *
atm_mib_new_atmTrafficDescrParamEntry();

extern int
atm_mib_get_atmTrafficDescrParamEntry(host_snmp *s, atmTrafficDescrParamEntry_t **atmTrafficDescrParamEntry);

extern int
atm_mib_set_atmTrafficDescrParamEntry(host_snmp *s, atmTrafficDescrParamEntry_t *atmTrafficDescrParamEntry);

extern void
atm_mib_free_atmTrafficDescrParamEntry(atmTrafficDescrParamEntry_t *atmTrafficDescrParamEntry);

/*
 * C type definitions for ATM-MIB::atmVplEntry.
 */

typedef struct atmVplEntry {
    gint32   ifIndex;
    gint32   atmVplVpi;
    gint32   *atmVplAdminStatus;
    gint32   *atmVplOperStatus;
    guint32  *atmVplLastChange;
    gint32   *atmVplReceiveTrafficDescrIndex;
    gint32   *atmVplTransmitTrafficDescrIndex;
    gint32   *atmVplCrossConnectIdentifier;
    gint32   *atmVplRowStatus;
    gint32   *atmVplCastType;
    gint32   *atmVplConnKind;
} atmVplEntry_t;

extern int
atm_mib_get_atmVplTable(host_snmp *s, atmVplEntry_t ***atmVplEntry);

extern void
atm_mib_free_atmVplTable(atmVplEntry_t **atmVplEntry);

extern atmVplEntry_t *
atm_mib_new_atmVplEntry();

extern int
atm_mib_get_atmVplEntry(host_snmp *s, atmVplEntry_t **atmVplEntry);

extern int
atm_mib_set_atmVplEntry(host_snmp *s, atmVplEntry_t *atmVplEntry);

extern void
atm_mib_free_atmVplEntry(atmVplEntry_t *atmVplEntry);

/*
 * C type definitions for ATM-MIB::atmVclEntry.
 */

typedef struct atmVclEntry {
    gint32   ifIndex;
    gint32   atmVclVpi;
    gint32   atmVclVci;
    gint32   *atmVclAdminStatus;
    gint32   *atmVclOperStatus;
    guint32  *atmVclLastChange;
    gint32   *atmVclReceiveTrafficDescrIndex;
    gint32   *atmVclTransmitTrafficDescrIndex;
    gint32   *atmVccAalType;
    gint32   *atmVccAal5CpcsTransmitSduSize;
    gint32   *atmVccAal5CpcsReceiveSduSize;
    gint32   *atmVccAal5EncapsType;
    gint32   *atmVclCrossConnectIdentifier;
    gint32   *atmVclRowStatus;
    gint32   *atmVclCastType;
    gint32   *atmVclConnKind;
} atmVclEntry_t;

extern int
atm_mib_get_atmVclTable(host_snmp *s, atmVclEntry_t ***atmVclEntry);

extern void
atm_mib_free_atmVclTable(atmVclEntry_t **atmVclEntry);

extern atmVclEntry_t *
atm_mib_new_atmVclEntry();

extern int
atm_mib_get_atmVclEntry(host_snmp *s, atmVclEntry_t **atmVclEntry);

extern int
atm_mib_set_atmVclEntry(host_snmp *s, atmVclEntry_t *atmVclEntry);

extern void
atm_mib_free_atmVclEntry(atmVclEntry_t *atmVclEntry);

/*
 * C type definitions for ATM-MIB::atmVpCrossConnectEntry.
 */

typedef struct atmVpCrossConnectEntry {
    gint32   atmVpCrossConnectIndex;
    gint32   atmVpCrossConnectLowIfIndex;
    gint32   atmVpCrossConnectLowVpi;
    gint32   atmVpCrossConnectHighIfIndex;
    gint32   atmVpCrossConnectHighVpi;
    gint32   *atmVpCrossConnectAdminStatus;
    gint32   *atmVpCrossConnectL2HOperStatus;
    gint32   *atmVpCrossConnectH2LOperStatus;
    guint32  *atmVpCrossConnectL2HLastChange;
    guint32  *atmVpCrossConnectH2LLastChange;
    gint32   *atmVpCrossConnectRowStatus;
} atmVpCrossConnectEntry_t;

extern int
atm_mib_get_atmVpCrossConnectTable(host_snmp *s, atmVpCrossConnectEntry_t ***atmVpCrossConnectEntry);

extern void
atm_mib_free_atmVpCrossConnectTable(atmVpCrossConnectEntry_t **atmVpCrossConnectEntry);

extern atmVpCrossConnectEntry_t *
atm_mib_new_atmVpCrossConnectEntry();

extern int
atm_mib_get_atmVpCrossConnectEntry(host_snmp *s, atmVpCrossConnectEntry_t **atmVpCrossConnectEntry);

extern int
atm_mib_set_atmVpCrossConnectEntry(host_snmp *s, atmVpCrossConnectEntry_t *atmVpCrossConnectEntry);

extern void
atm_mib_free_atmVpCrossConnectEntry(atmVpCrossConnectEntry_t *atmVpCrossConnectEntry);

/*
 * C type definitions for ATM-MIB::atmVcCrossConnectEntry.
 */

typedef struct atmVcCrossConnectEntry {
    gint32   atmVcCrossConnectIndex;
    gint32   atmVcCrossConnectLowIfIndex;
    gint32   atmVcCrossConnectLowVpi;
    gint32   atmVcCrossConnectLowVci;
    gint32   atmVcCrossConnectHighIfIndex;
    gint32   atmVcCrossConnectHighVpi;
    gint32   atmVcCrossConnectHighVci;
    gint32   *atmVcCrossConnectAdminStatus;
    gint32   *atmVcCrossConnectL2HOperStatus;
    gint32   *atmVcCrossConnectH2LOperStatus;
    guint32  *atmVcCrossConnectL2HLastChange;
    guint32  *atmVcCrossConnectH2LLastChange;
    gint32   *atmVcCrossConnectRowStatus;
} atmVcCrossConnectEntry_t;

extern int
atm_mib_get_atmVcCrossConnectTable(host_snmp *s, atmVcCrossConnectEntry_t ***atmVcCrossConnectEntry);

extern void
atm_mib_free_atmVcCrossConnectTable(atmVcCrossConnectEntry_t **atmVcCrossConnectEntry);

extern atmVcCrossConnectEntry_t *
atm_mib_new_atmVcCrossConnectEntry();

extern int
atm_mib_get_atmVcCrossConnectEntry(host_snmp *s, atmVcCrossConnectEntry_t **atmVcCrossConnectEntry);

extern int
atm_mib_set_atmVcCrossConnectEntry(host_snmp *s, atmVcCrossConnectEntry_t *atmVcCrossConnectEntry);

extern void
atm_mib_free_atmVcCrossConnectEntry(atmVcCrossConnectEntry_t *atmVcCrossConnectEntry);

/*
 * C type definitions for ATM-MIB::aal5VccEntry.
 */

typedef struct aal5VccEntry {
    gint32   ifIndex;
    gint32   aal5VccVpi;
    gint32   aal5VccVci;
    guint32  *aal5VccCrcErrors;
    guint32  *aal5VccSarTimeOuts;
    guint32  *aal5VccOverSizedSDUs;
} aal5VccEntry_t;

extern int
atm_mib_get_aal5VccTable(host_snmp *s, aal5VccEntry_t ***aal5VccEntry);

extern void
atm_mib_free_aal5VccTable(aal5VccEntry_t **aal5VccEntry);

extern aal5VccEntry_t *
atm_mib_new_aal5VccEntry();

extern int
atm_mib_get_aal5VccEntry(host_snmp *s, aal5VccEntry_t **aal5VccEntry);

extern void
atm_mib_free_aal5VccEntry(aal5VccEntry_t *aal5VccEntry);


#endif /* _ATM_MIB_H_ */
