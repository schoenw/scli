/*							-- DO NOT EDIT --
 * Generated by smidump version 0.4.8:
 *   smidump -f scli \
 *     --scli-include='sonetMediumEntry|sonetSection' SONET-MIB
 *
 * Derived from SONET-MIB:
 *   The MIB module to describe SONET/SDH interface objects.
 *   
 *   Copyright (C) The Internet Society (2003).  This version
 *   of this MIB module is part of RFC 3592;  see the RFC
 *   itself for full legal notices.
 *
 * Revision 2003-08-11 00:00:
 *   The key changes made to this MIB module
 *   since its publication in RFC 2558
 *   are as follows.
 *   
 *   (1) Corrected typographical error
 *       (bellcore1991(2) in sonetSESthresholdSet)
 *   
 *   (2) Added support for sts192cSTM64(6) and
 *       sts768cSTM256(7) in sonetPathCurrentWidth
 *   
 *   (3) Corrected description of the applicability
 *       of VTs for SDH for improved accuracy
 *   
 *   (4) Added clarification in the SES description that
 *       CV counts should be frozen during SESs
 *   
 *   (5) Corrected typographical errors:
 *       - Line Alarm Indication Signal description of the
 *         Terminology section (20.5 --> 2.5 seconds)
 *       - In the Terminology section
 *         sonetSESThresholdSet  --> sonetSESthresholdSet
 *       
 *
 * Revision 1998-10-19 00:00:
 *   The RFC 2558 version of this MIB module.
 *   
 *   
 *   
 *   
 *   
 *   The key changes made to this MIB module
 *   since its initial publication in RFC 1595
 *   are as follows.
 *   
 *   (1) The MODULE-IDENTITY has been updated to reflect the
 *       changes to the MIB.
 *   
 *   (2) Where applicable, the textual conventions
 *       PerfCurrentCount and PerfIntervalCount from
 *       PerfHist-TC-MIB have been used in place of Gauge32.
 *   
 *   (3) An agent now has the option to delay updates to
 *       the various performance counts in lieu of performing
 *       retroactive adjustments upon entering into or exiting
 *       from unavailable time. This implementation option is
 *       described in Appendix A of this memo.
 *   
 *   (4) In order to make the SONET-MIB more useful for
 *       circuit provisioning, the formerly read-only objects
 *       sonetMediumType, sonetMediumLineCoding,
 *       sonetMediumLineType, and sonetMediumCircuitIdentifier
 *       have been given a MAX-ACCESS of read-write. The
 *       MIN-ACCESS remains read-only.
 *   
 *   (5) The DESCRIPTION clause for sonetMediumTimeElapsed has
 *       been updated to describe its behaviour if the duration
 *       of the current interval exceeds the maximum value.
 *   
 *   (6) The DESCRIPTION clause for sonetMediumValidIntervals
 *       has been updated to describe its behaviour when some
 *       intervals may be unavailable, and the object
 *       sonetMediumInvalidIntervals has been added to keep
 *       count of the number of missing intervals (if any).
 *   
 *   (7) The object sonetMediumLoopbackConfig has been added
 *       to enable or disable loopback configurations.
 *   
 *   (8) Because the error count thresholds for declaring
 *       severely errored seconds that are specified in ANSI
 *       T1.231-1993, ITU-T G.826-1995, and ANSI T1.231-1997
 *       are all different from each other and from the thresholds
 *       specified in RFC 1595, an enumerated INTEGER object
 *       sonetSESthresholdSet has been added to allow an agent
 *       to specify which threshold set is in use. Text has
 *       been added to Section 3 stating that if this object is
 *       not implemented the thresholds specified in RFC 1595
 *       should be assumed, and the table containing those
 *       thresholds has been moved to Appendix B of this memo.
 *   
 *   
 *   
 *   (9) A column with SYNTAX TruthValue has been added to each
 *       interval table.  The purpose of the additional column
 *       is to indicate, for each interval, whether the data
 *       is valid in the sense intended by ANSI T1.231 clause
 *       9.1.2.2 [T1.231a][T1.231b]. The objects in question are:
 *   
 *           sonetSectionIntervalValidData
 *           sonetLineIntervalValidData
 *           sonetFarEndLineIntervalValidData
 *           sonetPathIntervalValidData
 *           sonetFarEndPathIntervalValidData
 *           sonetVTIntervalValidData
 *           sonetFarEndVTIntervalValidData
 *   
 *   (10) The ranges for sonetPathCurrentStatus and
 *       sonetVTCurrentStatus have been made consistent
 *       with the DESCRIPTION clauses.
 *   
 *   (11) The conformance information has been updated. Previous
 *       conformance information from RFC 1595 has been
 *       deprecated. Some typographical errors in the deprecated
 *       section have been corrected in order to prevent
 *       MIB compilation errors.
 *
 * Revision 1994-01-03 00:00:
 *   The RFC 1595 version of this MIB module.
 *
 * $Id$
 */

#ifndef _SONET_MIB_H_
#define _SONET_MIB_H_

#include "gsnmp.h"

G_BEGIN_DECLS

/*
 * Tables to map enumerations to strings and vice versa.
 */

#define SONET_MIB_SONETMEDIUMTYPE_SONET 1
#define SONET_MIB_SONETMEDIUMTYPE_SDH   2

extern GNetSnmpEnum const sonet_mib_enums_sonetMediumType[];

#define SONET_MIB_SONETMEDIUMLINECODING_SONETMEDIUMOTHER 1
#define SONET_MIB_SONETMEDIUMLINECODING_SONETMEDIUMB3ZS  2
#define SONET_MIB_SONETMEDIUMLINECODING_SONETMEDIUMCMI   3
#define SONET_MIB_SONETMEDIUMLINECODING_SONETMEDIUMNRZ   4
#define SONET_MIB_SONETMEDIUMLINECODING_SONETMEDIUMRZ    5

extern GNetSnmpEnum const sonet_mib_enums_sonetMediumLineCoding[];

#define SONET_MIB_SONETMEDIUMLINETYPE_SONETOTHER           1
#define SONET_MIB_SONETMEDIUMLINETYPE_SONETSHORTSINGLEMODE 2
#define SONET_MIB_SONETMEDIUMLINETYPE_SONETLONGSINGLEMODE  3
#define SONET_MIB_SONETMEDIUMLINETYPE_SONETMULTIMODE       4
#define SONET_MIB_SONETMEDIUMLINETYPE_SONETCOAX            5
#define SONET_MIB_SONETMEDIUMLINETYPE_SONETUTP             6

extern GNetSnmpEnum const sonet_mib_enums_sonetMediumLineType[];


/*
 * C type definitions for SONET-MIB::sonetMediumEntry.
 */

#define SONET_MIB_SONETMEDIUMTYPE              (1 << 0) 
#define SONET_MIB_SONETMEDIUMTIMEELAPSED       (1 << 1) 
#define SONET_MIB_SONETMEDIUMVALIDINTERVALS    (1 << 2) 
#define SONET_MIB_SONETMEDIUMLINECODING        (1 << 3) 
#define SONET_MIB_SONETMEDIUMLINETYPE          (1 << 4) 
#define SONET_MIB_SONETMEDIUMCIRCUITIDENTIFIER (1 << 5) 
#define SONET_MIB_SONETMEDIUMINVALIDINTERVALS  (1 << 6) 
#define SONET_MIB_SONETMEDIUMLOOPBACKCONFIG    (1 << 7) 

typedef struct {
    gint32   ifIndex;                           /* ro IF-MIB::InterfaceIndex */
    gint32   *sonetMediumType;                  /* rw */
    gint32   *sonetMediumTimeElapsed;           /* ro */
    gint32   *sonetMediumValidIntervals;        /* ro */
    gint32   *sonetMediumLineCoding;            /* rw */
    gint32   *sonetMediumLineType;              /* rw */
    guchar   *sonetMediumCircuitIdentifier;     /* rw */
#define SONET_MIB_SONETMEDIUMCIRCUITIDENTIFIERMINLENGTH 0
#define SONET_MIB_SONETMEDIUMCIRCUITIDENTIFIERMAXLENGTH 255
    guint16  _sonetMediumCircuitIdentifierLength;
    gint32   *sonetMediumInvalidIntervals;      /* ro */
    guchar   *sonetMediumLoopbackConfig;        /* rw */
#define SONET_MIB_SONETMEDIUMLOOPBACKCONFIGMINLENGTH 0
#define SONET_MIB_SONETMEDIUMLOOPBACKCONFIGMAXLENGTH 1
    guint16  _sonetMediumLoopbackConfigLength;
} sonet_mib_sonetMediumEntry_t;

extern void
sonet_mib_get_sonetMediumTable(GNetSnmp *s, sonet_mib_sonetMediumEntry_t ***sonetMediumEntry, gint64 mask, GError **error);

extern void
sonet_mib_free_sonetMediumTable(sonet_mib_sonetMediumEntry_t **sonetMediumEntry);

extern sonet_mib_sonetMediumEntry_t *
sonet_mib_new_sonetMediumEntry(void);

extern void
sonet_mib_get_sonetMediumEntry(GNetSnmp *s, sonet_mib_sonetMediumEntry_t **sonetMediumEntry, gint32 ifIndex, gint64 mask, GError **error);

extern void
sonet_mib_set_sonetMediumEntry(GNetSnmp *s, sonet_mib_sonetMediumEntry_t *sonetMediumEntry, gint64 mask, GError **error);

extern void
sonet_mib_free_sonetMediumEntry(sonet_mib_sonetMediumEntry_t *sonetMediumEntry);

/*
 * C type definitions for SONET-MIB::sonetSectionCurrentEntry.
 */

#define SONET_MIB_SONETSECTIONCURRENTSTATUS (1 << 0) 
#define SONET_MIB_SONETSECTIONCURRENTESS    (1 << 1) 
#define SONET_MIB_SONETSECTIONCURRENTSESS   (1 << 2) 
#define SONET_MIB_SONETSECTIONCURRENTSEFSS  (1 << 3) 
#define SONET_MIB_SONETSECTIONCURRENTCVS    (1 << 4) 

typedef struct {
    gint32   ifIndex;                        /* ro IF-MIB::InterfaceIndex */
    gint32   *sonetSectionCurrentStatus;     /* ro */
    guint32  *sonetSectionCurrentESs;        /* ro PerfHist-TC-MIB::PerfCurrentCount */
    guint32  *sonetSectionCurrentSESs;       /* ro PerfHist-TC-MIB::PerfCurrentCount */
    guint32  *sonetSectionCurrentSEFSs;      /* ro PerfHist-TC-MIB::PerfCurrentCount */
    guint32  *sonetSectionCurrentCVs;        /* ro PerfHist-TC-MIB::PerfCurrentCount */
} sonet_mib_sonetSectionCurrentEntry_t;

extern void
sonet_mib_get_sonetSectionCurrentTable(GNetSnmp *s, sonet_mib_sonetSectionCurrentEntry_t ***sonetSectionCurrentEntry, gint64 mask, GError **error);

extern void
sonet_mib_free_sonetSectionCurrentTable(sonet_mib_sonetSectionCurrentEntry_t **sonetSectionCurrentEntry);

extern sonet_mib_sonetSectionCurrentEntry_t *
sonet_mib_new_sonetSectionCurrentEntry(void);

extern void
sonet_mib_get_sonetSectionCurrentEntry(GNetSnmp *s, sonet_mib_sonetSectionCurrentEntry_t **sonetSectionCurrentEntry, gint32 ifIndex, gint64 mask, GError **error);

extern void
sonet_mib_free_sonetSectionCurrentEntry(sonet_mib_sonetSectionCurrentEntry_t *sonetSectionCurrentEntry);

/*
 * C type definitions for SONET-MIB::sonetSectionIntervalEntry.
 */

#define SONET_MIB_SONETSECTIONINTERVALESS       (1 << 0) 
#define SONET_MIB_SONETSECTIONINTERVALSESS      (1 << 1) 
#define SONET_MIB_SONETSECTIONINTERVALSEFSS     (1 << 2) 
#define SONET_MIB_SONETSECTIONINTERVALCVS       (1 << 3) 
#define SONET_MIB_SONETSECTIONINTERVALVALIDDATA (1 << 4) 

typedef struct {
    gint32   ifIndex;                            /* ro IF-MIB::InterfaceIndex */
    gint32   sonetSectionIntervalNumber;         /* na */
    guint32  *sonetSectionIntervalESs;           /* ro PerfHist-TC-MIB::PerfIntervalCount */
    guint32  *sonetSectionIntervalSESs;          /* ro PerfHist-TC-MIB::PerfIntervalCount */
    guint32  *sonetSectionIntervalSEFSs;         /* ro PerfHist-TC-MIB::PerfIntervalCount */
    guint32  *sonetSectionIntervalCVs;           /* ro PerfHist-TC-MIB::PerfIntervalCount */
    gint32   *sonetSectionIntervalValidData;     /* ro SNMPv2-TC::TruthValue */
} sonet_mib_sonetSectionIntervalEntry_t;

extern void
sonet_mib_get_sonetSectionIntervalTable(GNetSnmp *s, sonet_mib_sonetSectionIntervalEntry_t ***sonetSectionIntervalEntry, gint64 mask, GError **error);

extern void
sonet_mib_free_sonetSectionIntervalTable(sonet_mib_sonetSectionIntervalEntry_t **sonetSectionIntervalEntry);

extern sonet_mib_sonetSectionIntervalEntry_t *
sonet_mib_new_sonetSectionIntervalEntry(void);

extern void
sonet_mib_get_sonetSectionIntervalEntry(GNetSnmp *s, sonet_mib_sonetSectionIntervalEntry_t **sonetSectionIntervalEntry, gint32 ifIndex, gint32 sonetSectionIntervalNumber, gint64 mask, GError **error);

extern void
sonet_mib_free_sonetSectionIntervalEntry(sonet_mib_sonetSectionIntervalEntry_t *sonetSectionIntervalEntry);


G_END_DECLS

#endif /* _SONET_MIB_H_ */
